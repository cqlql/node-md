import{_ as t,Z as p,$ as o,a0 as n,a1 as a,Y as e,a2 as c,E as l}from"./framework-d33190a3.js";const i={},r=c(`<h2 id="对象初始化器" tabindex="-1"><a class="header-anchor" href="#对象初始化器" aria-hidden="true">#</a> 对象初始化器</h2><p>不使用构造函数，而使用对象初始化器创建并初始化实例</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">CqlDotNet<span class="token punctuation">.</span>SDK<span class="token punctuation">.</span>APIEntity</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">APIResult</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> message <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> status <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token return-type class-name">Object<span class="token punctuation">?</span></span> result <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">APIResult</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> result<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// 使用对象初始化器</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">APIResult</span> 
    <span class="token punctuation">{</span> 
      status <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>
      result <span class="token operator">=</span> result 
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 也可以加上括号。构造函数没有参数可以省略括号</span>
    <span class="token comment">// return new APIResult() { status = 200, result = result };</span>

    <span class="token comment">// 相当于</span>
    <span class="token comment">/*
    var apiResult = new APIResult()
    apiResult.status = 200
    apiResult.result = result
    */</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="匿名类型实例化" tabindex="-1"><a class="header-anchor" href="#匿名类型实例化" aria-hidden="true">#</a> 匿名类型实例化</h2><p>使用对象初始化器方式创建</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Greeting <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">example<span class="token punctuation">.</span>Greeting</span><span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">example<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Output:</span>
<span class="token comment">// Hello, World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>`,7),u={href:"https://www.bilibili.com/read/cv15412899",target:"_blank",rel:"noopener noreferrer"},d={href:"https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/object-and-collection-initializers",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/new-operator",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const s=l("ExternalLinkIcon");return p(),o("div",null,[r,n("p",null,[n("a",u,[a("第 90 讲：C# 3 之对象初始化器"),e(s)])]),n("p",null,[n("a",d,[a("对象和集合初始值设定项 - C# 编程指南 | Microsoft Docs"),e(s)])]),n("p",null,[n("a",k,[a("new 运算符 - C# 参考 | Microsoft Docs"),e(s)])])])}const g=t(i,[["render",m],["__file","new 运算符.html.vue"]]);export{g as default};
