import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{a as r,e as n,o as a}from"./app-B9WJV81J.js";const i={};function l(o,t){return a(),r("div",null,t[0]||(t[0]=[n(`<h2 id="手动抛异常-throw" tabindex="-1"><a class="header-anchor" href="#手动抛异常-throw"><span>手动抛异常 throw</span></a></h2><h3 id="throw-例子" tabindex="-1"><a class="header-anchor" href="#throw-例子"><span>throw 例子</span></a></h3><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// IndexOutOfRangeException 是超出数组索引范围的异常</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">throw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IndexOutOfRangeException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常见异常类" tabindex="-1"><a class="header-anchor" href="#常见异常类"><span>常见异常类</span></a></h3><table><thead><tr><th>异常类型</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.exception" target="_blank" rel="noopener noreferrer">Exception</a></td><td>所有异常的基类。</td><td>无（使用此异常的派生类）。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.indexoutofrangeexception" target="_blank" rel="noopener noreferrer">IndexOutOfRangeException</a></td><td>仅当错误地对数组进行索引时，才由运行时引发。</td><td>在数组的有效范围外对数组进行索引：<br><code>arr[arr.Length+1]</code></td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.nullreferenceexception" target="_blank" rel="noopener noreferrer">NullReferenceException</a></td><td>仅当引用 null 对象时，才由运行时引发。</td><td><code>object o = null;</code><br><code>o.ToString();</code></td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.invalidoperationexception" target="_blank" rel="noopener noreferrer">InvalidOperationException</a></td><td>当处于无效状态时，由方法引发。</td><td>从基础集合删除项后调用<code>Enumerator.MoveNext()</code>。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.argumentexception" target="_blank" rel="noopener noreferrer">ArgumentException</a></td><td>所有自变量异常的基类。</td><td>无（使用此异常的派生类）。</td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.argumentnullexception" target="_blank" rel="noopener noreferrer">ArgumentNullException</a></td><td>由不允许参数为 null 的方法引发。</td><td><code>String s = null;</code><br><code>&quot;Calculate&quot;.IndexOf(s);</code></td></tr><tr><td><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.argumentoutofrangeexception" target="_blank" rel="noopener noreferrer">ArgumentOutOfRangeException</a></td><td>由验证自变量是否位于给定范围内的方法引发。</td><td><code>String s = &quot;string&quot;;</code><br><code>s.Substring(s.Length+1);</code></td></tr></tbody></table><h3 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档：</span></a></h3><p><a href="https://learn.microsoft.com/zh-cn/dotnet/standard/exceptions/" target="_blank" rel="noopener noreferrer">在 .NET 中处理和引发异常</a></p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/throw" target="_blank" rel="noopener noreferrer">throw</a></p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/standard/exceptions/how-to-explicitly-throw-exceptions" target="_blank" rel="noopener noreferrer">如何：显式抛出异常</a></p><h2 id="try-finally" tabindex="-1"><a class="header-anchor" href="#try-finally"><span>try-finally</span></a></h2><p>发生异常 finally 块将不会执行，程序终止。所以考虑异常情况还是需要 catch 块。</p><p>更多信息：<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/try-finally" target="_blank" rel="noopener noreferrer">try-finally</a></p><h2 id="try-catch-finally" tabindex="-1"><a class="header-anchor" href="#try-catch-finally"><span>try-catch-finally</span></a></h2><p>更多信息：<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/try-catch-finally" target="_blank" rel="noopener noreferrer">try-catch-finally</a></p><h2 id="finally-块作用" tabindex="-1"><a class="header-anchor" href="#finally-块作用"><span>finally 块作用</span></a></h2><p>既然发生异常如果没有使用 catch，finally 块也不会执行。那么，还要 finally 干嘛呢？？其实不是的， finally 主要解决 try 或 catch 中包括 return 的情况。在 try 或 catch 中包括 return 时，finally 块后面是不会执行的，但 finally 块会执行。</p><p>参考文档：<a href="https://blog.csdn.net/P_newbie/article/details/106082028" target="_blank" rel="noopener noreferrer">C# try-catch-finally 的 finally 的作用是什么？</a></p>`,17)]))}const c=e(i,[["render",l],["__file","异常处理.html.vue"]]),d=JSON.parse('{"path":"/DotNet/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html","title":"","lang":"zh-CN","frontmatter":{"description":"手动抛异常 throw throw 例子 常见异常类 参考文档： 在 .NET 中处理和引发异常 throw 如何：显式抛出异常 try-finally 发生异常 finally 块将不会执行，程序终止。所以考虑异常情况还是需要 catch 块。 更多信息：try-finally try-catch-finally 更多信息：try-catch-fin...","head":[["meta",{"property":"og:url","content":"http://docs.cqlql.top/DotNet/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"开发笔记"}],["meta",{"property":"og:description","content":"手动抛异常 throw throw 例子 常见异常类 参考文档： 在 .NET 中处理和引发异常 throw 如何：显式抛出异常 try-finally 发生异常 finally 块将不会执行，程序终止。所以考虑异常情况还是需要 catch 块。 更多信息：try-finally try-catch-finally 更多信息：try-catch-fin..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-25T10:34:57.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-25T10:34:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-25T10:34:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"桥黎\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"手动抛异常 throw","slug":"手动抛异常-throw","link":"#手动抛异常-throw","children":[{"level":3,"title":"throw 例子","slug":"throw-例子","link":"#throw-例子","children":[]},{"level":3,"title":"常见异常类","slug":"常见异常类","link":"#常见异常类","children":[]},{"level":3,"title":"参考文档：","slug":"参考文档","link":"#参考文档","children":[]}]},{"level":2,"title":"try-finally","slug":"try-finally","link":"#try-finally","children":[]},{"level":2,"title":"try-catch-finally","slug":"try-catch-finally","link":"#try-catch-finally","children":[]},{"level":2,"title":"finally 块作用","slug":"finally-块作用","link":"#finally-块作用","children":[]}],"git":{"createdTime":1668872366000,"updatedTime":1671964497000,"contributors":[{"name":"陈桥黎","email":"cql.ql@qq.com","commits":1}]},"readingTime":{"minutes":1.42,"words":427},"filePathRelative":"DotNet/异常处理.md","localizedDate":"2022年11月19日","autoDesc":true,"excerpt":"<h2>手动抛异常 throw</h2>\\n<h3>throw 例子</h3>\\n<div class=\\"language-cs line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"cs\\" data-title=\\"cs\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// IndexOutOfRangeException 是超出数组索引范围的异常</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">throw</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> new </span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">IndexOutOfRangeException</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">();</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{c as comp,d as data};
