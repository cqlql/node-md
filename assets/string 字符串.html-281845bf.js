import{_ as o,Z as p,$ as c,a0 as s,a1 as n,Y as t,a2 as e,E as i}from"./framework-d33190a3.js";const l={},r=s("h2",{id:"连接字符串",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#连接字符串","aria-hidden":"true"},"#"),n(" 连接字符串")],-1),u={href:"https://learn.microsoft.com/zh-cn/dotnet/csharp/how-to/concatenate-multiple-strings#stringbuilder",target:"_blank",rel:"noopener noreferrer"},d=e(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Use StringBuilder for concatenation in tight loops.</span>
<span class="token class-name"><span class="token keyword">var</span></span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    sb<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),k={href:"https://docs.microsoft.com/zh-cn/dotnet/csharp/how-to/concatenate-multiple-strings",target:"_blank",rel:"noopener noreferrer"},m=e(`<h2 id="字符串插值" tabindex="-1"><a class="header-anchor" href="#字符串插值" aria-hidden="true">#</a> 字符串插值</h2><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> <code>$</code></h3><p>行字符串内插入其他字符串值。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> userName <span class="token operator">=</span> <span class="token string">&quot;&lt;Type your name here&gt;&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Today<span class="token punctuation">.</span><span class="token function">ToShortDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Use string interpolation to concatenate strings.</span>
<span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;Hello </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">userName</span><span class="token punctuation">}</span></span><span class="token string">. Today is </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">date</span><span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),h={href:"https://learn.microsoft.com/zh-cn/dotnet/csharp/how-to/concatenate-multiple-strings#string-interpolation",target:"_blank",rel:"noopener noreferrer"},v=s("h3",{id:"string-format",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#string-format","aria-hidden":"true"},"#"),n(),s("code",null,"String.Format")],-1),g={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.string.format?view=net-6.0#control-spacing",target:"_blank",rel:"noopener noreferrer"},b={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.string.format?view=net-6.0#control-alignment",target:"_blank",rel:"noopener noreferrer"},f={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.string.format?view=net-6.0#custom-formatting-operations",target:"_blank",rel:"noopener noreferrer"},_={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.string.format?view=net-6.0",target:"_blank",rel:"noopener noreferrer"},y=e(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 1. 控制格式</span>
<span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;It is now {0:d} at {0:t}&quot;</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Output similar to: &#39;It is now 4/10/2015 at 10:04 AM&#39;</span>

<span class="token comment">// 2. 多个</span>
<span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;At {0}, the temperature is {1}°C.&quot;</span><span class="token punctuation">,</span>
                         DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">,</span> <span class="token number">20.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Output similar to: &#39;At 4/10/2015 9:29:41 AM, the temperature is 20.4°C.&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多行字符串" tabindex="-1"><a class="header-anchor" href="#多行字符串" aria-hidden="true">#</a> 多行字符串 <code>&quot;&quot;&quot;</code></h2><p>从 C# 11 开始支持</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> embeddedXML <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>&quot;
       <span class="token operator">&lt;</span><span class="token class-name">element</span> attr <span class="token operator">=</span> <span class="token string">&quot;content&quot;</span><span class="token operator">&gt;</span>
           <span class="token operator">&lt;</span><span class="token class-name">body</span> style<span class="token operator">=</span><span class="token string">&quot;normal&quot;</span><span class="token operator">&gt;</span>
               Here <span class="token keyword">is</span> <span class="token class-name">the</span> main text
           <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
           <span class="token operator">&lt;</span>footer<span class="token operator">&gt;</span>
               Excerpts <span class="token keyword">from</span> <span class="token string">&quot;An amazing story&quot;</span>
           <span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">&gt;</span>
       <span class="token operator">&lt;</span><span class="token operator">/</span>element <span class="token operator">&gt;</span>
       <span class="token string">&quot;&quot;</span>&quot;<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),q={href:"https://learn.microsoft.com/zh-cn/dotnet/csharp/programming-guide/strings/#raw-string-literals",target:"_blank",rel:"noopener noreferrer"},w=s("h2",{id:"字符串格式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#字符串格式","aria-hidden":"true"},"#"),n(" 字符串格式")],-1),x={href:"https://learn.microsoft.com/zh-cn/dotnet/standard/base-types/formatting-types",target:"_blank",rel:"noopener noreferrer"},S=e(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 货币格式</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">format</span><span class="token punctuation">:</span> <span class="token string">&quot;余额: {0:C}&quot;</span><span class="token punctuation">,</span><span class="token named-parameter punctuation">arg0</span><span class="token punctuation">:</span> <span class="token number">1.126</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 余额： ¥1.13</span>

<span class="token comment">// 数字格式</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;数: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token number">10000</span></span><span class="token format-string"><span class="token punctuation">:</span>N</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10,000.00</span>

<span class="token comment">// 这里涉及 &#39;#&#39; &#39;0&#39; 占位符，&#39;,&#39; 分隔符</span>
<span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">timer<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token format-string"><span class="token punctuation">:</span>#,##0</span><span class="token punctuation">}</span></span><span class="token string">ms elapsed.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="非空判断" tabindex="-1"><a class="header-anchor" href="#非空判断" aria-hidden="true">#</a> 非空判断</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function C(L,N){const a=i("ExternalLinkIcon");return p(),c("div",null,[r,s("p",null,[n("在使用循环连接字符串时，应避免时用 String.Concat 或 + 运算符，应使用使用 "),s("a",u,[n("StringBuilder"),t(a)]),n(" 代替。")]),d,s("p",null,[n("更多信息："),s("a",k,[n("连接字符串"),t(a)])]),m,s("p",null,[n("更多信息："),s("a",h,[n("如何连接多个字符串（C# 指南） | Microsoft Learn"),t(a)])]),v,s("p",null,[n("功能比较强大。"),s("a",g,[n("间距"),t(a)]),n("，"),s("a",b,[n("对齐"),t(a)]),n("都可以控制，还能"),s("a",f,[n("自定义格式"),t(a)]),n("。更高级的用法请看"),s("a",_,[n("官方文档"),t(a)]),n("。")]),y,s("p",null,[n("更多信息："),s("a",q,[n("字符串 - C# 编程指南 | Microsoft Learn"),t(a)])]),w,s("p",null,[n("包括数字格式，日期格式，自定义格式等等，这里只列出几种用法示例，更多信息移步"),s("a",x,[n("官方文档"),t(a)]),n("。")]),S])}const z=o(l,[["render",C],["__file","string 字符串.html.vue"]]);export{z as default};
