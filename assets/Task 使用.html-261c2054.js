import{_ as e,Z as o,$ as c,a0 as n,a1 as s,Y as t,a2 as p,E as i}from"./framework-d33190a3.js";const l={},u=p(`<h2 id="task-说明" tabindex="-1"><a class="header-anchor" href="#task-说明" aria-hidden="true">#</a> Task 说明</h2><p>从线程池中使用一个线程</p><h2 id="task-基础使用" tabindex="-1"><a class="header-anchor" href="#task-基础使用" aria-hidden="true">#</a> Task 基础使用</h2><p>等待方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>t.Wait()</td><td>等待名为 t 的 Task 实例执行完成</td></tr><tr><td>Task.WaitAny(Task[])</td><td>数组中的任务并行执行，只等待最先完成的任务</td></tr><tr><td>Task.WaitAll(Task[])</td><td>数组中的任务并行执行，等待所有任务执行完成</td></tr></tbody></table><p>创建任务示例</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">static</span> <span class="token class-name">System<span class="token punctuation">.</span>Console</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> timer <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 创建任务的 3 种方式 */</span>
<span class="token comment">// 方式1</span>
<span class="token class-name">Task</span> taskA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span>MethodA<span class="token punctuation">)</span><span class="token punctuation">;</span>
taskA<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 单独调用 Start 开始。更灵活</span>
<span class="token comment">// 方式2 直接开始任务</span>
<span class="token class-name">Task</span> taskB <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span>MethodB<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 方式3 直接开始任务</span>
<span class="token class-name">Task</span> taskC <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>MethodC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 等待所有任务运行。否则将立即往下执行</span>
<span class="token class-name">Task<span class="token punctuation">[</span><span class="token punctuation">]</span></span> tasks <span class="token operator">=</span> <span class="token punctuation">{</span> taskA<span class="token punctuation">,</span> taskB<span class="token punctuation">,</span> taskC <span class="token punctuation">}</span><span class="token punctuation">;</span>
Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">timer<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string">ms&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Starting Method A...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Finished Method A...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Starting Method B...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Finished Method B...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Starting Method C...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Finished Method C.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-task-factory-startnew-依次执行任务" tabindex="-1"><a class="header-anchor" href="#使用-task-factory-startnew-依次执行任务" aria-hidden="true">#</a> 使用 <code>Task.Factory.StartNew</code> 依次执行任务</h2><p>等待上一个任务完成后再执行下一个任务，并且将上一个任务的返回值传递给下一个任务，例子如下</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> <span class="token function">CallWebService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Starting call to web service...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Finished call to web service.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">89.99M</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">CallStoredProcedure</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">decimal</span></span> amount<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Starting call to stored procedure...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Finished call to stored procedure.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$&quot;12 products cost more than </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">amount</span><span class="token format-string"><span class="token punctuation">:</span>C</span><span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> timer <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Passing the result of one task as an input into another.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> taskCallWebServiceAndThenStoredProcedure <span class="token operator">=</span>
  Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span>CallWebService<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>previousTask <span class="token operator">=&gt;</span> <span class="token function">CallStoredProcedure</span><span class="token punctuation">(</span>previousTask<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这步很关键</span>
<span class="token comment">// 调用 taskCallWebServiceAndThenStoredProcedure.Result 就会等待任务执行完</span>
<span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Result: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">taskCallWebServiceAndThenStoredProcedure<span class="token punctuation">.</span>Result</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">timer<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token format-string"><span class="token punctuation">:</span>#,##0</span><span class="token punctuation">}</span></span><span class="token string">ms elapsed.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="嵌套任务-使用-task-factory-startnew-实现" tabindex="-1"><a class="header-anchor" href="#嵌套任务-使用-task-factory-startnew-实现" aria-hidden="true">#</a> 嵌套任务 - 使用 <code>Task.Factory.StartNew</code> 实现</h2><p>在任务中又创建一个任务，这个新建的任务就是子任务。</p><p>没有特殊声明情况，父任务和子任务是一起运行的。如果需要等待子任务完成后再完成父任务，则需要再创建子任务的时候增加参数TaskCreationOptions.AttachedToParent。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">static</span> <span class="token class-name">System<span class="token punctuation">.</span>Console</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">NestedAndChildTasks</span>
<span class="token punctuation">{</span>
  <span class="token keyword">class</span> <span class="token class-name">Program</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OuterMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Outer method starting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 子任务</span>
      <span class="token comment">// TaskCreationOptions.AttachedToParent 参数实现串联执行</span>
      <span class="token class-name"><span class="token keyword">var</span></span> inner <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span>InnerMethod<span class="token punctuation">,</span> TaskCreationOptions<span class="token punctuation">.</span>AttachedToParent<span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Outer method finished.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InnerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Inner method starting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Inner method finished.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token class-name"><span class="token keyword">var</span></span> outer <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span>OuterMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
      outer<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Console app is stopping.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),k={href:"https://cloud.tencent.com/developer/article/1432315",target:"_blank",rel:"noopener noreferrer"},r=p(`<h2 id="task-factory-startnew-vs-new-task-start" tabindex="-1"><a class="header-anchor" href="#task-factory-startnew-vs-new-task-start" aria-hidden="true">#</a> “Task.Factory.StartNew” vs “new Task(…).Start”</h2><p><code>Task.Factory.StartNew</code> 能确保只调用一次 start， 而 <code>new Task(…).Start</code> 可能在其他地方多次调用 start，。 但有些地方还是需要 <code>new Task(…).Start</code>，见下：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 错误的例子</span>
 <span class="token class-name">Task</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
t <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// …</span>
      <span class="token comment">// 这里 t会被视为 null</span>
    t<span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span><span class="token comment">/* … */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 正确的例子</span>
<span class="token class-name">Task</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// …</span>
    t<span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span><span class="token comment">/* … */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),d={href:"https://devblogs.microsoft.com/pfxteam/task-factory-startnew-vs-new-task-start/",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("参考文档："),n("a",k,[s("C#嵌套任务和子任务"),t(a)])]),r,n("p",null,[s("原文链接："),n("a",d,[s('"Task.Factory.StartNew" vs "new Task(...).Start" - .NET Parallel Programming (microsoft.com)'),t(a)])])])}const g=e(l,[["render",v],["__file","Task 使用.html.vue"]]);export{g as default};
