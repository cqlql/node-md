import{_ as c,Z as i,$ as l,a0 as n,a1 as s,Y as a,a3 as u,a2 as t,E as p}from"./framework-d33190a3.js";const r={},d=t(`<h2 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h2><p><strong>字面量方式</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;成员1&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">//可以是不同成员</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>构造函数方式</strong></p><p>1、空的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、指定长度</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
成员值都是<span class="token keyword">undefined</span>。此方式有技巧使用
虽然值是<span class="token keyword">undefined</span>，但join后不会出现<span class="token keyword">undefined</span>字符串
比如：
<span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 依然返回空字符串</span>
<span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 9个x</span>
<span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;li&gt;&lt;/li&gt;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 9个li标签</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="length" tabindex="-1"><a class="header-anchor" href="#length" aria-hidden="true">#</a> length</h2><p>可读写属性</p><p><strong>读操作</strong> 都懂...略过</p><p><strong>写操作</strong> ==增==操作(比之前多)：相当于末尾追加了成员，初始值为 undefined。非真实存在，forEach、for in 会跳过此成员</p><p>==减==操作(比之前少)：少了多少相当于 末尾删了多少<br> 数组对 length 属性进行减少的 写操作，成员真的减少了。<br> 有时候想，length 属性如果没真正删除，reverse 反转后是不是能把删除的反过来？而实际上，<br> reverse 反转操作正常(强调：正常指并没有把删掉的成员反转过来)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>div1<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> array<span class="token punctuation">.</span>length
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="取成员" tabindex="-1"><a class="header-anchor" href="#取成员" aria-hidden="true">#</a> 取成员</h2><h3 id="取单个-一般获取" tabindex="-1"><a class="header-anchor" href="#取单个-一般获取" aria-hidden="true">#</a> 取单个,一般获取</h3><p>根据索引获取</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;张&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;李&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;陈&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;黄&#39;</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 根据以前的笔记说firefox这样不行？反正现在是行了...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="取单个-带删除的获取-shift、pop、splice" tabindex="-1"><a class="header-anchor" href="#取单个-带删除的获取-shift、pop、splice" aria-hidden="true">#</a> 取单个,带删除的获取 shift、pop、splice</h3><p>取一个便少一个。将更改 原数组</p><p><strong>取第一个</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>取最后一个</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>取指定</strong> 使用 splice 实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;张&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;李&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;陈&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;黄&#39;</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// &#39;陈&#39;。取到了第3个成员</span>
arr <span class="token comment">// [&#39;张&#39;, &#39;李&#39;, &#39;黄&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="取多个-带删除的获取-splice" tabindex="-1"><a class="header-anchor" href="#取多个-带删除的获取-splice" aria-hidden="true">#</a> 取多个,带删除的获取 splice</h3><p>取多个指定成员，取多少原数组便会减多少 <code>Array.splice(开始索引,数量)</code> 返回一个新数组，装载取到的成员</p><h3 id="取多个-复制形式获取-slice" tabindex="-1"><a class="header-anchor" href="#取多个-复制形式获取-slice" aria-hidden="true">#</a> 取多个，复制形式获取-slice</h3><p>详见 <a href="%E5%A4%8D%E5%88%B6%E6%95%B0%E7%BB%84-slice">复制数组-slice</a></p><h2 id="增成员" tabindex="-1"><a class="header-anchor" href="#增成员" aria-hidden="true">#</a> 增成员</h2><h3 id="追加" tabindex="-1"><a class="header-anchor" href="#追加" aria-hidden="true">#</a> 追加</h3><p>底部-push：追加一个或多个</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;烧饼1&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>头部-unshift：追加一个或多个</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>array<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">&#39;烧饼0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;烧饼1&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回值返回更改后的数组长度</p><h3 id="指定位置增加" tabindex="-1"><a class="header-anchor" href="#指定位置增加" aria-hidden="true">#</a> 指定位置增加</h3><p><strong>使用 splice，真正意义上的指定位置增加</strong> 参数 1：增加的位置，此位置原有的元素会往后挤参数 2：必须为 0 参数 3：要增加的成员，可以多个</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var arr = [1, 2, 3];

arr.splice(1, 0, &#39;成员1&#39;); // [1, &#39;成员1&#39;, 2, 3]
arr.splice(2, 0, &#39;成员2&#39;, &#39;成员3&#39;);
arr.splice(3, 0, [&#39;成员4&#39;, &#39;成员5&#39;]); // 注意，此方式没有例外，依然只添加一个成员，3索引位置是一个数组（以为会有concat特性，添加2个成员，实际不是）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用修改方式，严格来说这还是修改</strong> 当索引大于等于 length 时，才是增加，否则为修改</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var arr=[];
arr[3]=1;
console.log(arr.length);// 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删成员" tabindex="-1"><a class="header-anchor" href="#删成员" aria-hidden="true">#</a> 删成员</h2><h3 id="使用-delete-操作符" tabindex="-1"><a class="header-anchor" href="#使用-delete-操作符" aria-hidden="true">#</a> 使用 delete 操作符</h3><p>删第一个</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var arr=[&quot;张&quot;, &quot;李&quot;, &quot;陈&quot;, &quot;黄&quot;];
delete arr[0];
console.log(arr[0]);// undefined
console.log(arr.length);// 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删最后一个</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var arr=[&quot;张&quot;, &quot;李&quot;, &quot;陈&quot;, &quot;黄&quot;];
delete arr[3];
console.log(arr[3]);// undefined
console.log(arr.length);// 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个例子说明，只是把值换成了 undefined 了，length 不变。<br> ==但是==<br> 使用 for in 无法循环出删掉的成员了，如果强行赋值 undefined，又能循环出来，看来真删除了。<br> 或者说这只是对象的特性而已，数组也是对象嘛</p><p><strong>总结</strong> delete 操作不会致使数组的 length 属性改变 delete 操作与直接赋 undefined 是不一样的，for in 无法获取 delete 删除的成员，可获取服 undefined 的成员</p><p><strong>兼容性</strong>：包括 ie6 的所有</p><h3 id="通过设置-length" tabindex="-1"><a class="header-anchor" href="#通过设置-length" aria-hidden="true">#</a> 通过设置 length</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var arr=[&quot;张&quot;, &quot;李&quot;, &quot;陈&quot;, &quot;黄&quot;];
arr.length=1;
console.log(arr);//[&quot;张&quot;] 。真的就只有这么一个了！！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>兼容性：包括 ie6 的所有</p><p>详情 见 [length] 写操作</p><h3 id="删头尾-一次删一个" tabindex="-1"><a class="header-anchor" href="#删头尾-一次删一个" aria-hidden="true">#</a> 删头尾，一次删一个</h3><p>使用 shift pop 见 [取成员]</p><h3 id="指定范围删除-一次可删多个" tabindex="-1"><a class="header-anchor" href="#指定范围删除-一次可删多个" aria-hidden="true">#</a> 指定范围删除，一次可删多个</h3><p>使用 splice 见 [取成员]</p><h3 id="根据索引删除-使用-splice" tabindex="-1"><a class="header-anchor" href="#根据索引删除-使用-splice" aria-hidden="true">#</a> 根据索引删除-使用 splice</h3><p>将更改原数组。返回一个新数组，装载删掉的成员</p><p>快速使用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 删除指定索引位置成员，参数2固定为1</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="任意多个索引删除" tabindex="-1"><a class="header-anchor" href="#任意多个索引删除" aria-hidden="true">#</a> 任意多个索引删除</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 任意多个索引删除
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">arr</span> 要操作的数组
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">indexs</span> 要删除的索引集合
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span> 新数组
 */</span>
<span class="token keyword">function</span> <span class="token function">arrayDelete</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> indexs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">let</span> hasOwnProperty <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty
  indexs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dict<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>dict<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">delete</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>错误示例，使用 splice 循环删除</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
估计只有第1次准确，接下来的循环可能会删错。因为第1次删除会改变现有元素的索引，所以之前记录的删除索引已经不再准确
而且forEach 循环次数也发生了改变
*/</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token comment">// 删除元素 2、3，实际删的是2</span>
      arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="改成员" tabindex="-1"><a class="header-anchor" href="#改成员" aria-hidden="true">#</a> 改成员</h2><p>根据索引覆盖操作。都懂...</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;张&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;李&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;陈&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;黄&#39;</span><span class="token punctuation">]</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;xx&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="转换" tabindex="-1"><a class="header-anchor" href="#转换" aria-hidden="true">#</a> 转换</h2><h3 id="字符串转数组-split" tabindex="-1"><a class="header-anchor" href="#字符串转数组-split" aria-hidden="true">#</a> 字符串转数组-split</h3><p><code>String.split([string])</code></p><p><strong>· 给参情况</strong> 用字符串中指定子串 将 字符串 切割成 数组</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;张,李,陈,黄&#39;.split(&#39;,&#39;);//[&quot;张&quot;, &quot;李&quot;, &quot;陈&quot;, &quot;黄&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>· 空字符串情况</strong> 将每个字符分割成数组</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;张,李,陈,黄&#39;.split(&#39;&#39;);//[&quot;张&quot;, &quot;,&quot;, &quot;李&quot;, &quot;,&quot;, &quot;陈&quot;, &quot;,&quot;, &quot;黄&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>· 不给参情况</strong> 返回只有原字符串一个成员的数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;张,李,陈,黄&#39;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//[&quot;张,李,陈,黄&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数组转字符串-join" tabindex="-1"><a class="header-anchor" href="#数组转字符串-join" aria-hidden="true">#</a> 数组转字符串-join</h3><p><strong>用指定字符串 将 数组 连接成 字符串</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">&#39;张&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;李&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;陈&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;黄&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;张-李-陈-黄&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>不带参：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">&#39;张&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;李&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;陈&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;黄&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;张,李,陈,黄&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>似乎默认使用了逗号相连也可以说是 直接将数组转换成字符串</p><p><strong>数组 length=1</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">&#39;张&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;张&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>数组 length=0</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token comment">//true。看来是空字符串...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="集合转数组-slice-技巧" tabindex="-1"><a class="header-anchor" href="#集合转数组-slice-技巧" aria-hidden="true">#</a> 集合转数组-slice 技巧</h3><p>集合指的是那种有 length 属性的类数组对象</p><p><strong>HTMLCollection 集合例子</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>eItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>children<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种集合 ie678 不支持，参数 3 不会影响 HTMLCollection 集合</p><p><strong>对象模拟 例子</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">0</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token number">1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
arr<span class="token punctuation">.</span>lenght <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种支持包括 ie6 的所有。参数 3 如果给，将影响 obj。不给或者负数都不影响</p><blockquote><p>其他 splice 用法见 <a href="splice%E5%A2%9E%E5%88%A0%E8%AF%A6%E8%A7%A3">splice 增删详解</a></p></blockquote><h3 id="数组转字符串-tostring" tabindex="-1"><a class="header-anchor" href="#数组转字符串-tostring" aria-hidden="true">#</a> 数组转字符串-toString</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 相当于 arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;成员1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;成员2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//成员1,成员2,[object Object]</span>
arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token comment">//成员1,成员2,[object Object]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="splice-增删详解" tabindex="-1"><a class="header-anchor" href="#splice-增删详解" aria-hidden="true">#</a> splice 增删详解</h2>`,101),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice",target:"_blank",rel:"noopener noreferrer"},v=t(`<p><strong>语法</strong> <code>array.splice(start, deleteCount[, item1[, item2[, ...]]])</code></p><p><strong>参数：</strong></p><ul><li><strong>start</strong> 必须。起始索引，负数表示从尾部开始起始，而超出情况将再尾部追加</li><li><strong>deleteCount</strong> 必须(实测可以不带)。删除的个数(含第 start 位) 0 或负数都表示不删除，一般用 0 超出情况将删除 index 之后的所有成员技术文档都说这个是必须，实测不带也可以，不带将删除 start(包含 start)之后的所有</li><li><strong>itemN</strong> 可选，要替换的成员。将指定区域替换成指定成员</li></ul><p><strong>返回值：</strong> 被删掉的成员组成的新数组没有被删返回空数组</p><p><strong>将更改原始数组：</strong> deleteCount 删除、itemN 增加 将应用到原数组中。而被删除的成员将拼成一个新数组被返回</p><p><strong>兼容：</strong> 包括 ie6 的所有</p><p><strong>关于 clone：</strong> splice 不能实现 clone，arr.concat、arr.slice 可以实现</p><h2 id="slice-复制数组" tabindex="-1"><a class="header-anchor" href="#slice-复制数组" aria-hidden="true">#</a> slice-复制数组</h2><p>可指定位置进行复制</p><p><strong>语法</strong> <code>arr.slice(begin[, end])</code></p><p><strong>参数</strong></p><ul><li><p><strong>begin</strong> 开始索引，从 0 开始可以是负数，负数情况 相当于 length + begin，相减后结果如果还是负数将视 0 为起始包含，新数组将包含此位置的值经测试此参数也是可选的，省略情况相当于 arr.slice(0)</p></li><li><p><strong>end</strong> 结束索引，从 0 开始省略此参数将将一直取到原数组末尾可以是负数，负数情况原理同 begin 一样不包含，新数组将不包含此位置的值小于或者等于 begin 将 返回空数组，负数情况也如此</p></li></ul><p><strong>返回新数组</strong></p><p><strong>不更改原数组</strong></p><p><strong>完全复制</strong> 不带参或者 begin 为 0 即可实现完全复制</p><p><strong>可用于取子字符串</strong> 详情见<a href="">String</a></p><p><strong>示例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>test<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//[2,3]</span>
test<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//[]</span>
test<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//[3,4,5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>兼容性</strong> 包括 ie6 的所有浏览器</p><p><strong>concat 也可以实现复制</strong></p><h2 id="concat-合并数组" tabindex="-1"><a class="header-anchor" href="#concat-合并数组" aria-hidden="true">#</a> concat-合并数组</h2><p>实现 合并 或者 追加。返回一个新数组数组情况是合并，非数组是追加。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;成员1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;成员2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;成员3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&#39;成员4&#39;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;成员5&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// [&quot;成员1&quot;, &quot;成员2&quot;, &quot;成员3&quot;, &quot;成员4&quot;, &quot;成员5&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>语法：</strong> <code>array.concat(value1, value2, ..., valueN)</code></p><p><strong>参数：</strong> valueN 可选，不带参将实现复制</p><p><strong>关于合并：</strong> 就是将数组的所有子成员追加进来，相当于如果参数是数组，那么你当它没有中括号吧。合并只限于子级， 如果子成员还是数组 ，不会再去合并，此数组将视为成员。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;成员1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;成员2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;成员3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;成员4&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;成员5&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment">// [&quot;成员1&quot;, &quot;成员2&quot;, &quot;成员3&quot;, &quot;成员4&quot;, [&quot;成员5&quot;]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>返回值：</strong> 合并后的数组</p><p><strong>不更改原数组，也不会更改作为参数的数组</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;成员1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;成员2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;成员3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;成员4&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;成员5&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [&quot;成员1&quot;, &quot;成员2&quot;, &quot;成员3&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">// [&quot;成员4&quot;, &quot;成员5&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment">// [&quot;成员1&quot;, &quot;成员2&quot;, &quot;成员3&quot;, &quot;成员4&quot;, &quot;成员5&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可实现 clone</strong> 不带参即可 slice 也可以实现 clone</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var arr = [&#39;成员1&#39;, &#39;成员2&#39;, &#39;成员3&#39;];
var newArr = arr.concat();
兼容性：包括ie6的所有
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sort-排序" tabindex="-1"><a class="header-anchor" href="#sort-排序" aria-hidden="true">#</a> sort 排序</h2><h3 id="默认排序-将按字符排序" tabindex="-1"><a class="header-anchor" href="#默认排序-将按字符排序" aria-hidden="true">#</a> 默认排序，将按字符排序</h3><p>不带参即可，升序，即小的在前面。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>将更改原数组</strong></p><p><strong>字符排序探索</strong> 逐个字符进行对比(如果是数字，并非根据数量)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[100,99].sort()// [100, 99]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其实，如果看了下面的自定义排序，上例的结果感觉应该是这么来的。转字符串，再比较</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&#39;100&#39;&lt;&#39;99&#39;// true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>汉字</strong> 的话根据 Unicode 编码，并非按照拼音</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[&#39;陈&#39;,&#39;张&#39;, &#39;黄&#39;,&#39;李&#39;].sort();//[&quot;张&quot;, &quot;李&quot;, &quot;陈&quot;, &quot;黄&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上例中，如果按照拼音，&#39;陈&#39;应该在最前才对。而输出字符对于的 Unicode 编码是 5F20 674E 9648 9EC4，这很明显 ==推想，估计所有字符，包括字母都是按照编码来的==</p><h3 id="自定义排序" tabindex="-1"><a class="header-anchor" href="#自定义排序" aria-hidden="true">#</a> 自定义排序</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 升序。降序序 将1 和 -1 调换即可</span>
<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3333</span><span class="token punctuation">]</span>
  <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">// 小于0即可，可以不为-1</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token comment">// 大于0即可，可以不为1</span>
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token comment">// 相等，不处理</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>
    <span class="token comment">// 优化后</span>
    <span class="token comment">// 升序。降序序 将 b-a 即可</span>
    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3333</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>强调：将更改原数组</strong></p><h3 id="有返回值" tabindex="-1"><a class="header-anchor" href="#有返回值" aria-hidden="true">#</a> 有返回值</h3><p>虽然更改了原数组，但还是有返回值，返回更改后的原数组，或者说返回原数组引用</p><h2 id="reverse-数组反转" tabindex="-1"><a class="header-anchor" href="#reverse-数组反转" aria-hidden="true">#</a> reverse 数组反转</h2><p><code>arr.reverse()</code> 差不多就是将整个数组倒过来，第一个位置就是 最后一个成员了</p><h2 id="查找值-取值的索引-indexof" tabindex="-1"><a class="header-anchor" href="#查找值-取值的索引-indexof" aria-hidden="true">#</a> 查找值，取值的索引-indexOf</h2><p>取成员索引，不存在返回-1 ie 兼容性：ie9+</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> d<span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
<span class="token comment">// 支持对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查找值-是否包含指定值-includes" tabindex="-1"><a class="header-anchor" href="#查找值-是否包含指定值-includes" aria-hidden="true">#</a> 查找值，是否包含指定值-includes</h2>`,55),m={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes",target:"_blank",rel:"noopener noreferrer"},b=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> pets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;cat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dog&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bat&#39;</span><span class="token punctuation">]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pets<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;cat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// expected output: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组类型判断" tabindex="-1"><a class="header-anchor" href="#数组类型判断" aria-hidden="true">#</a> 数组类型判断</h2>`,2),g=t('<h2 id="遍历迭代" tabindex="-1"><a class="header-anchor" href="#遍历迭代" aria-hidden="true">#</a> 遍历迭代</h2><h3 id="缺失数组避开问题" tabindex="-1"><a class="header-anchor" href="#缺失数组避开问题" aria-hidden="true">#</a> 缺失数组避开问题</h3><h3 id="every-和-some-是否满足" tabindex="-1"><a class="header-anchor" href="#every-和-some-是否满足" aria-hidden="true">#</a> every 和 some : 是否满足</h3><p>every 和 some 都会避开缺失元素</p><p>可实现中断遍历：forEach 没法中断，但这个可以啊</p><p><strong>every</strong></p><p>必须全对</p><p>传递函数只有全部返回 true(或者可转化为 true 的值)，才返回 true</p><p>(此处可略看)反之，只要出现 false，遍历停止，返回 false</p><p><strong>some</strong></p><p>有一个对就行</p><p>传递函数只要出现 true(或者可转化为 true 的值)，便停止遍历，返回 true</p><p>(此处可略略看)反之，必须全部 false 才返回 false</p><h3 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> filter</h3><p>实现过滤掉不符合条件的成员返回一个新数组，不更改原数组会避开缺失元素</p><p><strong>语法</strong> <code>var new_arrary = arr.filter(callback[, thisArg])</code></p><p><strong>参数</strong></p><ul><li><p><strong>callback</strong> 用来测试数组的每个元素的函数。调用时使用参数 (element, index, array)。返回 true(或者可转化为 true 的值)表示保留该元素（通过测试），false(或者可转化为 false 的值)则不保留。</p></li><li><p><strong>thisArg</strong> 可选。执行 callback 时的用于 this 的值。</p></li></ul><p><strong>浏览器兼容性</strong></p><p>ie9+</p><h3 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach" aria-hidden="true">#</a> forEach</h3>',21),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach",target:"_blank",rel:"noopener noreferrer"},f=t(`<blockquote><p>注意: 没有返回值!</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>

array1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// element 当前成员</span>
  <span class="token comment">// index 当前索引</span>
  <span class="token comment">// array 为原数组</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// expected output: &quot;a&quot;</span>
<span class="token comment">// expected output: &quot;b&quot;</span>
<span class="token comment">// expected output: &quot;c&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>兼容性</strong> ie678 不支持。可用 for in 代替。不推荐 for 循环，主要是因为 for 循环如果不特殊处理不会跳过不存在成员，即稀疏数组问题</p><p><strong>注意</strong> 只支持 array，其他集合，比如 document.getElementsByTagName(&#39;div&#39;)、document.body.children， 不支持。但可以变通实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>children<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>循环过程中<strong>没法终止循环</strong>。下例依然输出了所有成员，无法通过 false 终止</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 这是一个错误的例子</span>
<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h3><p>数组映射。遍历数组，并返回一个新的</p><p>不更改原数组</p><h4 id="也会避开空元素-但返回的新数组依然存在空元素" tabindex="-1"><a class="header-anchor" href="#也会避开空元素-但返回的新数组依然存在空元素" aria-hidden="true">#</a> 也会避开空元素，但返回的新数组依然存在空元素</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token comment">// 删除元素，生成稀疏数组</span>
<span class="token keyword">delete</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">delete</span> arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 遇空数组不会执行此函数</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token keyword">return</span> el
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment">// 依然有空数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h4><p>arr.map(callback[, thisArg])</p><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h4><ul><li>callback</li><li>currentValue</li><li>index</li><li>array</li><li>thisArg 可选。callback 函数中 this 调用</li></ul><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//传入的第二个参数</span>
  <span class="token keyword">return</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">//给新数组添加值</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> $<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="兼容性" tabindex="-1"><a class="header-anchor" href="#兼容性" aria-hidden="true">#</a> 兼容性</h4><p>ie678 不支持</p><h3 id="reduce、reduceright-相反" tabindex="-1"><a class="header-anchor" href="#reduce、reduceright-相反" aria-hidden="true">#</a> reduce、reduceRight(相反)</h3><p>遍历累加</p>`,22),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce",target:"_blank",rel:"noopener noreferrer"},y=t(`<p><strong>语法</strong> arr.reduce(callback[, initialValue])</p><p><strong>参数</strong></p><ul><li>callback</li><li>previousValue</li><li>currentValue</li><li>index</li><li>array</li><li>initialValue 可选。累加的初始值。如果不给，默认是数组的第一个，并且直接进行第二次遍历</li></ul><p><strong>示例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">previousValue<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> previousValue <span class="token operator">+</span> currentValue <span class="token comment">//给下一次遍历传入的值</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 还可以按属性对object分类: https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#%E6%8C%89%E5%B1%9E%E6%80%A7%E5%AF%B9object%E5%88%86%E7%B1%BB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>兼容性</strong> ie678 不支持</p><p><strong>注意</strong> initialValue 如果不给，默认值是数组的第一个，并且直接进行第二次遍历</p><h2 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h2><h3 id="es5-方式" tabindex="-1"><a class="header-anchor" href="#es5-方式" aria-hidden="true">#</a> es5 方式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全兼容方式" tabindex="-1"><a class="header-anchor" href="#全兼容方式" aria-hidden="true">#</a> 全兼容方式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> isArray <span class="token operator">=</span>
  Array<span class="token punctuation">.</span>isArray <span class="token operator">||</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Array]&#39;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>es5 方式本质也使用了 Object.prototype.toString</p><h3 id="不推荐使用" tabindex="-1"><a class="header-anchor" href="#不推荐使用" aria-hidden="true">#</a> 不推荐使用</h3><p>iframe 情况可能会出问题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span>
  <span class="token class-name">Array</span><span class="token punctuation">(</span>
    <span class="token comment">// true</span>
    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token keyword">instanceof</span>
  <span class="token class-name">Array</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> delete</h2><p>删除真实存在，不等同赋 undefined。具体见下</p><h2 id="关于直接赋-undefined-与-delete-操作区别讨论" tabindex="-1"><a class="header-anchor" href="#关于直接赋-undefined-与-delete-操作区别讨论" aria-hidden="true">#</a> 关于直接赋 undefined 与 delete 操作区别讨论</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>

<span class="token comment">// 高级浏览器</span>
a<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// ie678使用如下</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 上面两个循环都只循环了3次</span>

<span class="token comment">// 删除真实存在，不等同赋undefined</span>
<span class="token keyword">delete</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

a<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 现在只循环2次了</span>

a<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">10</span>

a<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 还是循环2次</span>

a<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">1</span>

a<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 循环1次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ol><li>即使是赋了 undefined 的成员，依然是存在的</li><li>直接操作 length，增大操作，并不影响成员增加的本质。但对 lenght 直接减少操作会影响存在成员个数</li><li>forEach 看似是用 for in 实现的，而且这两种循环只根据真实存在成员，不参照 length 属性</li><li>数组也是对象，依然保留对象特性。for in、delete 的使用跟对象一样，也是可以做数据字典的。即 delete 生效于 for in(当然还有 forEach)</li><li>delete 不改变 length。for 循环差不多是自己制定循环次数，受制于 length，属例外</li></ol><p>一些根据 length 来实现的属性，即使成员不存在： toString、join、split</p><p>非根据 length 来实现的属性，只根据真实存在成员： forEach、for in</p><p>此处兼容性包括 ie6 的所有浏览器</p><h2 id="取最大-小值" tabindex="-1"><a class="header-anchor" href="#取最大-小值" aria-hidden="true">#</a> 取最大/小值</h2><p>通过 fun.apply</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 43 最大值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="数组类型检测" tabindex="-1"><a class="header-anchor" href="#数组类型检测" aria-hidden="true">#</a> 数组类型检测</h2><p>方式 1： <code>Array.isArray(obj)</code></p><p>方式 2： <code>obj instanceof Array</code></p><h2 id="valueof-返回数组对象本身" tabindex="-1"><a class="header-anchor" href="#valueof-返回数组对象本身" aria-hidden="true">#</a> valueOf 返回数组对象本身</h2>`,32),j={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf",target:"_blank",rel:"noopener noreferrer"},w=n("h2",{id:"参考文档",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考文档","aria-hidden":"true"},"#"),s(" 参考文档")],-1),q={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array",target:"_blank",rel:"noopener noreferrer"};function A(_,E){const e=p("ExternalLinkIcon"),o=p("RouterLink");return i(),l("div",null,[d,n("p",null,[n("a",k,[s("参考网址"),a(e)])]),v,n("p",null,[n("a",m,[s("Array.prototype.includes() - JavaScript | MDN"),a(e)])]),b,n("p",null,[s("详见 "),a(o,{to:"/JS/%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD.html"},{default:u(()=>[s("./类型判断.md")]),_:1})]),g,n("p",null,[n("a",h,[s("Array.prototype.forEach() - JavaScript | MDN"),a(e)])]),f,n("p",null,[n("a",x,[s("Array.prototype.reduce() - JavaScript | MDN"),a(e)])]),y,n("p",null,[n("a",j,[s("Object.prototype.valueOf() - JavaScript | MDN"),a(e)])]),w,n("p",null,[n("a",q,[s("Array - JavaScript | MDN"),a(e)])])])}const S=c(r,[["render",A],["__file","数组.html.vue"]]);export{S as default};
