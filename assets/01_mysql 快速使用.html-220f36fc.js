import{_ as c,Z as i,$ as l,a0 as n,Y as a,a3 as u,a1 as s,a2 as p,E as e}from"./framework-d33190a3.js";const r={},k=p(`<h2 id="在-docker-环境中安装-mysql" tabindex="-1"><a class="header-anchor" href="#在-docker-环境中安装-mysql" aria-hidden="true">#</a> 在 docker 环境中安装 mysql</h2><p><a href="/MySql/00_docker%20%E7%8E%AF%E5%A2%83%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B">详情移步</a></p><h2 id="创建模型" tabindex="-1"><a class="header-anchor" href="#创建模型" aria-hidden="true">#</a> 创建模型</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">AppConsole</span>
<span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Table</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token comment">// 当表名不一样时</span>
  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
  <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Colum</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token comment">// 字段名重新映射</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span></span><span class="token punctuation">]</span> <span class="token comment">// 字段必须</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StringLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token comment">// 字段长度</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Colum</span><span class="token attribute-arguments"><span class="token punctuation">(</span>TypeName<span class="token operator">=</span><span class="token string">&quot;char&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token comment">// 类型重新映射</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> username <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> password <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> nickname <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建继承-dbcontext-的类" tabindex="-1"><a class="header-anchor" href="#创建继承-dbcontext-的类" aria-hidden="true">#</a> 创建继承 DbContext 的类</h2><p>这个类将对应一个数据库。</p>`,6),d={class:"hint-container info"},m=n("p",{class:"hint-container-title"},"在新建前，先学习连接字符串相关知识",-1),v=n("p",null,[n("strong",null,"连接字符串"),s("以后可能会修改，有时也涉及到需要保护的敏感信息，所以一般不直接存放在源码中，可以存储在 appsettings.json、环境变量、用户机密存储或其他配置源中。这里我就放在 appsettings.json 中。")],-1),b={href:"https://learn.microsoft.com/zh-cn/ef/core/miscellaneous/connection-strings",target:"_blank",rel:"noopener noreferrer"},g=p(`<p>继承 DbContext 的类代码如下</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>EntityFrameworkCore</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Configuration</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token namespace">AppConsole</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserManage</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span>
  <span class="token punctuation">{</span>
    <span class="token comment">// 将 User 映射到表</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> User  <span class="token operator">=&gt;</span> <span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnConfiguring</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptionsBuilder</span> optionsBuilder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// Program.configuration 说明：这是根据 appsettings.json 创建的对象，将在控制台程序运行时进行初始化，实现代码见下面的控制台程序入口</span>
      <span class="token comment">// MysqlDatabase 是数据库名</span>
      optionsBuilder<span class="token punctuation">.</span><span class="token function">UseMySQL</span><span class="token punctuation">(</span>ConfigurationExtensions<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span>Program<span class="token punctuation">.</span>configuration<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token string">&quot;MysqlDatabase&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="控制台程序使用" tabindex="-1"><a class="header-anchor" href="#控制台程序使用" aria-hidden="true">#</a> 控制台程序使用</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Configuration</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token namespace">AppConsole</span>
<span class="token punctuation">{</span>
  <span class="token keyword">class</span> <span class="token class-name">Program</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IConfigurationRoot<span class="token punctuation">?</span></span> configuration<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// 用指定 json 文件创建 ConfigurationBuilder 对象</span>
      <span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token comment">// Microsoft.Extensions.Configuration.FileExtensions 包</span>
          <span class="token punctuation">.</span><span class="token function">SetBasePath</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token comment">// Microsoft.Extensions.Configuration.Json 包</span>
          <span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">&quot;appsettings.json&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">optional</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">reloadOnChange</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      configuration <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserManage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> db<span class="token punctuation">.</span>User<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
          Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>`,5),y={href:"https://dev.mysql.com/doc/connector-net/en/connector-net-entityframework-core.html",target:"_blank",rel:"noopener noreferrer"};function h(f,w){const o=e("RouterLink"),t=e("ExternalLinkIcon");return i(),l("div",null,[k,n("div",d,[m,v,n("p",null,[a(o,{to:"/DotNet/appsettings.json%20%E4%BD%BF%E7%94%A8.html"},{default:u(()=>[s("appsettings.json 的使用文档")]),_:1})]),n("p",null,[n("a",b,[s("数据库连接字符串的更多信息"),a(t)])])]),g,n("p",null,[n("a",y,[s("MySql.EntityFrameworkCore 包使用文档"),a(t)])])])}const x=c(r,[["render",h],["__file","01_mysql 快速使用.html.vue"]]);export{x as default};
