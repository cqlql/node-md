import{_ as t,Z as c,$ as o,a0 as n,a1 as s,Y as e,a2 as p,E as l}from"./framework-d33190a3.js";const i={},r=n("h2",{id:"_1-using-指令",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-using-指令","aria-hidden":"true"},"#"),s(" 1. using 指令")],-1),u=n("p",null,"用在源代码文件开头。导入命名空间的所有类，这样使用类时就无需详细指定命名空间了。",-1),d=n("p",null,"可以将以下修饰符用于 using 指令：",-1),k=n("ul",null,[n("li",null,[n("code",null,"global"),s(" 只需导入一次，当前项目的所有源代码都有效。可结合 static 使用。")]),n("li",null,[n("code",null,"static"),s(" 导入静态类的所有成员，这样连类名都无需指定了。")])],-1),h={href:"https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/using-directive",target:"_blank",rel:"noopener noreferrer"},m=p(`<h2 id="_2-释放资源" tabindex="-1"><a class="header-anchor" href="#_2-释放资源" aria-hidden="true">#</a> 2. 释放资源</h2><p>using 范围内执行完后自动调用 Dispose 释放，但只有实现了 IDisposable 接口的类才可以</p><h2 id="_3-using-别名" tabindex="-1"><a class="header-anchor" href="#_3-using-别名" aria-hidden="true">#</a> 3. using 别名</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>
<span class="token keyword">using</span> <span class="token class-name">aClass</span> <span class="token operator">=</span> <span class="token class-name">NameSpace1<span class="token punctuation">.</span>MyClass</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token class-name">bClass</span> <span class="token operator">=</span> <span class="token class-name">NameSpace2<span class="token punctuation">.</span>MyClass</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">testUsing</span>
<span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Class1</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">aClass</span> my1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">aClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>my1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">bClass</span> my2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">bClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>my2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="与-try-catch-区别" tabindex="-1"><a class="header-anchor" href="#与-try-catch-区别" aria-hidden="true">#</a> 与 try catch 区别</h2><p>try catch 只能捕获异常，能知道具体的异常；不能释放资源，需手动释放</p><p>using 释放资源，即使异常也能释放；异常情况不能知道是什么异常</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2><p>https://blog.csdn.net/fuhanghang/article/details/84453734</p>`,9),v={href:"https://blog.csdn.net/ironxue/article/details/12071901",target:"_blank",rel:"noopener noreferrer"},_={href:"https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/using",target:"_blank",rel:"noopener noreferrer"};function g(b,f){const a=l("ExternalLinkIcon");return c(),o("div",null,[r,u,d,k,n("p",null,[s("更详细的介绍参考官方文档："),n("a",h,[s("using 指令 - C# 参考 | Microsoft Learn"),e(a)])]),m,n("p",null,[n("a",v,[s("using 与 try catch"),e(a)])]),n("p",null,[n("a",_,[s("using 关键字 - C# 参考 | Microsoft Learn"),e(a)])])])}const C=t(i,[["render",g],["__file","using 用法.html.vue"]]);export{C as default};
