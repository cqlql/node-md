import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{a,e as n,o as e}from"./app-C4Nz-QBA.js";const t={};function l(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="_1-using-指令" tabindex="-1"><a class="header-anchor" href="#_1-using-指令"><span>1. using 指令</span></a></h2><p>用在源代码文件开头。导入命名空间的所有类，这样使用类时就无需详细指定命名空间了。</p><p>可以将以下修饰符用于 using 指令：</p><ul><li><code>global</code> 只需导入一次，当前项目的所有源代码都有效。可结合 static 使用。</li><li><code>static</code> 导入静态类的所有成员，这样连类名都无需指定了。</li></ul><p>更详细的介绍参考官方文档：<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/using-directive" target="_blank" rel="noopener noreferrer">using 指令 - C# 参考 | Microsoft Learn</a></p><h2 id="_2-释放资源" tabindex="-1"><a class="header-anchor" href="#_2-释放资源"><span>2. 释放资源</span></a></h2><p>using 范围内执行完后自动调用 Dispose 释放，但只有实现了 IDisposable 接口的类才可以</p><h2 id="_3-using-别名" tabindex="-1"><a class="header-anchor" href="#_3-using-别名"><span>3. using 别名</span></a></h2><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> aClass</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> NameSpace1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> bClass</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> NameSpace2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">namespace</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> testUsing</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Class1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            aClass</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> my1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">aClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">my1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            bClass</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> my2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">bClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">my2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="与-try-catch-区别" tabindex="-1"><a class="header-anchor" href="#与-try-catch-区别"><span>与 try catch 区别</span></a></h2><p>try catch 只能捕获异常，能知道具体的异常；不能释放资源，需手动释放</p><p>using 释放资源，即使异常也能释放；异常情况不能知道是什么异常</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2><p><a href="https://blog.csdn.net/fuhanghang/article/details/84453734" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/fuhanghang/article/details/84453734</a></p><p><a href="https://blog.csdn.net/ironxue/article/details/12071901" target="_blank" rel="noopener noreferrer">using 与 try catch</a></p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/using" target="_blank" rel="noopener noreferrer">using 关键字 - C# 参考 | Microsoft Learn</a></p>`,16)]))}const k=i(t,[["render",l],["__file","using 用法.html.vue"]]),d=JSON.parse('{"path":"/DotNet-CSharp/using%20%E7%94%A8%E6%B3%95.html","title":"","lang":"zh-CN","frontmatter":{"description":"1. using 指令 用在源代码文件开头。导入命名空间的所有类，这样使用类时就无需详细指定命名空间了。 可以将以下修饰符用于 using 指令： global 只需导入一次，当前项目的所有源代码都有效。可结合 static 使用。 static 导入静态类的所有成员，这样连类名都无需指定了。 更详细的介绍参考官方文档：using 指令 - C# 参考...","head":[["meta",{"property":"og:url","content":"http://docs.cqlql.top/DotNet-CSharp/using%20%E7%94%A8%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"开发笔记"}],["meta",{"property":"og:description","content":"1. using 指令 用在源代码文件开头。导入命名空间的所有类，这样使用类时就无需详细指定命名空间了。 可以将以下修饰符用于 using 指令： global 只需导入一次，当前项目的所有源代码都有效。可结合 static 使用。 static 导入静态类的所有成员，这样连类名都无需指定了。 更详细的介绍参考官方文档：using 指令 - C# 参考..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T02:25:15.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-28T02:25:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-28T02:25:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Joly\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"1. using 指令","slug":"_1-using-指令","link":"#_1-using-指令","children":[]},{"level":2,"title":"2. 释放资源","slug":"_2-释放资源","link":"#_2-释放资源","children":[]},{"level":2,"title":"3. using 别名","slug":"_3-using-别名","link":"#_3-using-别名","children":[]},{"level":2,"title":"与 try catch 区别","slug":"与-try-catch-区别","link":"#与-try-catch-区别","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1661585194000,"updatedTime":1730082315000,"contributors":[{"name":"陈桥黎","email":"cql.ql@qq.com","commits":3}]},"readingTime":{"minutes":0.92,"words":276},"filePathRelative":"DotNet-CSharp/using 用法.md","localizedDate":"2022年8月27日","autoDesc":true,"excerpt":"<h2>1. using 指令</h2>\\n<p>用在源代码文件开头。导入命名空间的所有类，这样使用类时就无需详细指定命名空间了。</p>\\n<p>可以将以下修饰符用于 using 指令：</p>\\n<ul>\\n<li><code>global</code> 只需导入一次，当前项目的所有源代码都有效。可结合 static 使用。</li>\\n<li><code>static</code> 导入静态类的所有成员，这样连类名都无需指定了。</li>\\n</ul>\\n<p>更详细的介绍参考官方文档：<a href=\\"https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/using-directive\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">using 指令 - C# 参考 | Microsoft Learn</a></p>"}');export{k as comp,d as data};
