import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{a,e as n,o as e}from"./app-TPYStmF-.js";const l={};function t(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="webpack-使用经验记录" tabindex="-1"><a class="header-anchor" href="#webpack-使用经验记录"><span>webpack 使用经验记录</span></a></h1><h2 id="css模块导入依赖控制-webpack-中使用postcss-导入依赖问题" tabindex="-1"><a class="header-anchor" href="#css模块导入依赖控制-webpack-中使用postcss-导入依赖问题"><span>css模块导入依赖控制（webpack 中使用postcss 导入依赖问题）</span></a></h2><p><strong>问题1</strong></p><p>直接在 entry 指定css文件，依赖顺序无法控制，极不稳定，会出现基础css在编译后跑到后面去</p><p>js 中 require css问题依旧</p><p><strong>解决</strong><br> 在css中 <code>@import</code> 问题解决，但有另一个问题</p><p>但产生<br><strong>问题2：</strong><br> css 中的<code>@import</code> 模块没法在 <code>resolve.modules</code> 指定的路径中寻找模块<br> (记得过去是可以的，不清楚是不是更新后有所调整)</p><p><strong>解决</strong><br> 使用 <code>postcss-smart-import</code> 插件，<code>path</code> 属性中指定属性</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  plugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;postcss-smart-import&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;E:/_work/Dropbox/github/modules/base-libs/css&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可按需引入构建的包" tabindex="-1"><a class="header-anchor" href="#可按需引入构建的包"><span>可按需引入构建的包</span></a></h2><p>之前出现这样的现象，通过<code>CommonsChunkPlugin</code>打出的某独立包某页面并不需要，但不引入却会报错。那时误以为，<code>CommonsChunkPlugin</code>打出的包都是关联的，所有页面必须全部引入，其实不是。</p><p><strong>发现原因：</strong><br> 之前要引入所有包，是因为 <code>CommonsChunkPlugin</code> &gt; <code>names</code>数组头居然生成了其他模块，关键我并没有指定这种模块(其实生成的这种不相干的模块应该生成到尾部才是。。。)。即某个生成的模块还包含其他模块，而这个其他模块某页面是必须的。<br> 解决很简单，2种方案：<br> 1. 可以查看源码，把这个多出来的模块固定打入某个公共包<br> 2. <code>names</code>数组头尾都放公共包</p><p>问题代码：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entry</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        common</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;zoom-touch&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Popup&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;vue&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;common-mobile&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;slider-one-load&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;msg-mobile&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;string-handle&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;j/common.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // click-vue 生成进来了，明明没有指定。这个模块所有页面都会用，预想是生成进 names 数组尾部才是，即common中。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 结论：\`CommonsChunkPlugin\` &gt; \`names\` 头尾都不干净，中间才干净。或者内部依赖问题所致</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        katex</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;katexcss&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;katex&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;./src/js/modules/latexParse.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    plugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        new</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> webpack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">optimize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CommonsChunkPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({           </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            names</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;katex&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;common&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="webpack-使用场景-与其他打包工具比较" tabindex="-1"><a class="header-anchor" href="#webpack-使用场景-与其他打包工具比较"><span>webpack 使用场景，与其他打包工具比较</span></a></h2><p>webpack / <a href="https://github.com/substack/node-browserify" target="_blank" rel="noopener noreferrer">browserify</a> 主要用来打包web应用</p><p>打包独立模块请用 <a href="https://github.com/rollup/rollup" target="_blank" rel="noopener noreferrer">rollup</a></p><h2 id="alias-精简模块路径" tabindex="-1"><a class="header-anchor" href="#alias-精简模块路径"><span>alias 精简模块路径</span></a></h2><p>可指向路径，还可直接指向模块</p><ol><li>定义别名</li></ol><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    resolve</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        alias</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 路径</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            j</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;./src/js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 模块</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            ChunkedShow</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;E:/_work/Dropbox/github/modules/chunked-show/src/v1/chunked-show.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用别名</li></ol><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1路径</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ChunkedShow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;j/index&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 相当于 ./src/js/index</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2模块</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ChunkedShow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;ChunkedShow&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="开发服务器配置-devserver" tabindex="-1"><a class="header-anchor" href="#开发服务器配置-devserver"><span>开发服务器配置：devServer</span></a></h2><h3 id="问题1-关于404-cannot-get" tabindex="-1"><a class="header-anchor" href="#问题1-关于404-cannot-get"><span>问题1：关于404 Cannot GET /</span></a></h3><p>需指定访问页面。比如生成的是demo.html，则地址为<code>http://localhost:9000/demo.html</code></p><h2 id="webpack-动态导入-注释魔法-webpackchunkname-不生效" tabindex="-1"><a class="header-anchor" href="#webpack-动态导入-注释魔法-webpackchunkname-不生效"><span>webpack 动态导入 注释魔法 webpackChunkName 不生效</span></a></h2><ol><li><strong>增加 <code>output.chunkFilename</code> 字段</strong></li></ol><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">output</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dist&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// string</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    chunkFilename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;[name].bundle.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    filename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[name].js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>配置 <code>babel-loader</code></strong><br><code>comments</code> 为 true 或者去掉即可</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    test: /\\.js$/,</span></span>
<span class="line"><span>    exclude: /node_modules/,</span></span>
<span class="line"><span>    loader: &#39;babel-loader&#39;,</span></span>
<span class="line"><span>    options: {</span></span>
<span class="line"><span>        &quot;presets&quot;: [&quot;env&quot;],</span></span>
<span class="line"><span>        &quot;plugins&quot;: [&quot;transform-runtime&quot;,&quot;syntax-dynamic-import&quot;],</span></span>
<span class="line"><span>        &quot;comments&quot;: false</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>},</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31)]))}const r=i(l,[["render",t],["__file","使用经验.html.vue"]]),d=JSON.parse('{"path":"/old__/%E5%B7%A5%E7%A8%8B-webpack/old/%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C.html","title":"webpack 使用经验记录","lang":"zh-CN","frontmatter":{"description":"webpack 使用经验记录 css模块导入依赖控制（webpack 中使用postcss 导入依赖问题） 问题1 直接在 entry 指定css文件，依赖顺序无法控制，极不稳定，会出现基础css在编译后跑到后面去 js 中 require css问题依旧 解决 在css中 @import 问题解决，但有另一个问题 但产生 问题2： css 中的@im...","head":[["meta",{"property":"og:url","content":"http://docs.cqlql.top/old__/%E5%B7%A5%E7%A8%8B-webpack/old/%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C.html"}],["meta",{"property":"og:site_name","content":"开发笔记"}],["meta",{"property":"og:title","content":"webpack 使用经验记录"}],["meta",{"property":"og:description","content":"webpack 使用经验记录 css模块导入依赖控制（webpack 中使用postcss 导入依赖问题） 问题1 直接在 entry 指定css文件，依赖顺序无法控制，极不稳定，会出现基础css在编译后跑到后面去 js 中 require css问题依旧 解决 在css中 @import 问题解决，但有另一个问题 但产生 问题2： css 中的@im..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T02:50:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-28T02:50:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"webpack 使用经验记录\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-28T02:50:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"桥黎\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"css模块导入依赖控制（webpack 中使用postcss 导入依赖问题）","slug":"css模块导入依赖控制-webpack-中使用postcss-导入依赖问题","link":"#css模块导入依赖控制-webpack-中使用postcss-导入依赖问题","children":[]},{"level":2,"title":"可按需引入构建的包","slug":"可按需引入构建的包","link":"#可按需引入构建的包","children":[]},{"level":2,"title":"webpack 使用场景，与其他打包工具比较","slug":"webpack-使用场景-与其他打包工具比较","link":"#webpack-使用场景-与其他打包工具比较","children":[]},{"level":2,"title":"alias 精简模块路径","slug":"alias-精简模块路径","link":"#alias-精简模块路径","children":[]},{"level":2,"title":"开发服务器配置：devServer","slug":"开发服务器配置-devserver","link":"#开发服务器配置-devserver","children":[{"level":3,"title":"问题1：关于404 Cannot GET /","slug":"问题1-关于404-cannot-get","link":"#问题1-关于404-cannot-get","children":[]}]},{"level":2,"title":"webpack 动态导入 注释魔法 webpackChunkName 不生效","slug":"webpack-动态导入-注释魔法-webpackchunkname-不生效","link":"#webpack-动态导入-注释魔法-webpackchunkname-不生效","children":[]}],"git":{"createdTime":1652927496000,"updatedTime":1730083825000,"contributors":[{"name":"陈桥黎","email":"cql.ql@qq.com","commits":1}]},"readingTime":{"minutes":2.29,"words":688},"filePathRelative":"__old__/工程-webpack/old/使用经验.md","localizedDate":"2022年5月19日","autoDesc":true,"excerpt":"\\n<h2>css模块导入依赖控制（webpack 中使用postcss 导入依赖问题）</h2>\\n<p><strong>问题1</strong></p>\\n<p>直接在 entry 指定css文件，依赖顺序无法控制，极不稳定，会出现基础css在编译后跑到后面去</p>\\n<p>js 中 require css问题依旧</p>\\n<p><strong>解决</strong><br>\\n在css中 <code>@import</code> 问题解决，但有另一个问题</p>\\n<p>但产生<br>\\n<strong>问题2：</strong><br>\\ncss 中的<code>@import</code> 模块没法在 <code>resolve.modules</code> 指定的路径中寻找模块<br>\\n(记得过去是可以的，不清楚是不是更新后有所调整)</p>"}');export{r as comp,d as data};
