import{_ as t,Z as e,$ as p,a0 as n,a1 as o,Y as c,a2 as s,E as l}from"./framework-d33190a3.js";const i={},u=s(`<h2 id="理解" tabindex="-1"><a class="header-anchor" href="#理解" aria-hidden="true">#</a> 理解</h2><p>多线程同时操作一个资源，如果不是原子的，可能会出问题。这时就需要 lock 互斥锁。</p><p><strong>死锁</strong>：线程X锁定变量A，但一直没有释放锁定，导致其他线程锁定变量A时一直阻塞。</p><p><strong>避免死锁</strong>：使用 Monitor.TryEnter 方法结合 try-finally 语句代替 lock，并提供超时。</p><p><strong>原子</strong>：不能比分割的最小粒子</p><p><strong>原子操作</strong>：不能被中断的一个或一系列操作</p><h2 id="lock-使用" tabindex="-1"><a class="header-anchor" href="#lock-使用" aria-hidden="true">#</a> lock 使用</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">string</span></span> Message<span class="token punctuation">;</span> <span class="token comment">// a shared resource</span>
<span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">object</span></span> conch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 如果 conch 已经锁定，则挂起当前线程，直到 conch 解锁再往下执行</span>
  <span class="token comment">// 如果 conch 没有锁定，则开始锁定conch，直到 lock 语句执行完成解锁</span>
  <span class="token keyword">lock</span> <span class="token punctuation">(</span>conch<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      Message <span class="token operator">+=</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">;</span>
      <span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>  
  <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>`,9),k={href:"https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/statements/lock",target:"_blank",rel:"noopener noreferrer"},r=s(`<h2 id="monitor-使用-推荐" tabindex="-1"><a class="header-anchor" href="#monitor-使用-推荐" aria-hidden="true">#</a> Monitor 使用 -- 推荐</h2><p>为避免死锁，推荐使用 Monitor</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">string</span></span> Message<span class="token punctuation">;</span> <span class="token comment">// a shared resource</span>
<span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">object</span></span> conch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">bool</span></span> lockWasTaken <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span>
  <span class="token punctuation">{</span>
    <span class="token comment">/* 
    如果 conch 已经被其他线程锁定，则挂起线程，并提供最多 15s 挂起时间。超过时间或者 conch 解锁后再往下执行。
    如果 conch 没有被锁定，则开始锁定并往下执行，并且将 lockWasTaken 设为 true。

    参数2 也可直接使用 int 类型的毫秒时间
     */</span>
    Monitor<span class="token punctuation">.</span><span class="token function">TryEnter</span><span class="token punctuation">(</span>conch<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">ref</span> lockWasTaken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      Message <span class="token operator">+=</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">;</span>
      <span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">finally</span>
  <span class="token punctuation">{</span>
    <span class="token comment">/* 
    解锁 conch。
    只有是当前进程锁定了 conch 时才能调用 Monitor.Exit，否则会触发 System.Threading.SynchronizationLockException 异常，所以这里最好加个判断。
     */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lockWasTaken<span class="token punctuation">)</span> Monitor<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span>conch<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符-不是原子的-可使用-interlocked-increment-方法代替" tabindex="-1"><a class="header-anchor" href="#运算符-不是原子的-可使用-interlocked-increment-方法代替" aria-hidden="true">#</a> 运算符++不是原子的，可使用 Interlocked.Increment 方法代替</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> Counter<span class="token punctuation">;</span>

  <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// Counter++;</span>
      Interlocked<span class="token punctuation">.</span><span class="token function">Increment</span><span class="token punctuation">(</span><span class="token keyword">ref</span> Counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// Counter++;</span>
      Interlocked<span class="token punctuation">.</span><span class="token function">Increment</span><span class="token punctuation">(</span><span class="token keyword">ref</span> Counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token class-name">Task</span> a <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span>MethodA<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Task</span> b <span class="token operator">=</span>Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span>MethodB<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Counter</span><span class="token punctuation">}</span></span><span class="token string"> string modifications.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function d(v,m){const a=l("ExternalLinkIcon");return e(),p("div",null,[u,n("p",null,[n("a",k,[o("lock 语句"),c(a)])]),r])}const h=t(i,[["render",d],["__file","lock 互斥锁~原子操作.html.vue"]]);export{h as default};
