import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{a as e,e as a,o as t}from"./app-B9WJV81J.js";const l={};function n(h,i){return t(),e("div",null,i[0]||(i[0]=[a(`<h2 id="output" tabindex="-1"><a class="header-anchor" href="#output"><span>output</span></a></h2><h3 id="output-publicpath" tabindex="-1"><a class="header-anchor" href="#output-publicpath"><span>output.publicPath</span></a></h3><p><a href="https://doc.webpack-china.org/configuration/output#output-publicpath" target="_blank" rel="noopener noreferrer">output.publicPath API 参考</a></p><p>输出还是按照 output.path 输出，只是更正全局资源引用路径。否则引用将相对 output.path</p><p>部分 loader 有单独的 publicPath，这个只是在全局的基础上追加，比如 file-loader</p><h3 id="output-filename" tabindex="-1"><a class="header-anchor" href="#output-filename"><span>output.filename</span></a></h3><h4 id="除了设置名称-还可以设置输出路径" tabindex="-1"><a class="header-anchor" href="#除了设置名称-还可以设置输出路径"><span>除了设置名称，还可以设置输出路径</span></a></h4><p>部分loader，比如 file-loader 的 name，还有 HtmlWebpackPlugin 的 filename 也有此特性</p><h4 id="hash" tabindex="-1"><a class="header-anchor" href="#hash"><span>[hash]</span></a></h4><p>每次构建都会生成一个跟之前不一样的，唯一的 hash，所有输出的文件共用同一个 hash</p><h4 id="chunkhash" tabindex="-1"><a class="header-anchor" href="#chunkhash"><span>[chunkhash]</span></a></h4><p>建议用这个，根据 chunk 生成，chunk 改变才改变</p><p>但，使用 devServer 构建情况，不能用这个，否则报错</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">filename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[name].[hash].bundle.js&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="modules-指定模块寻找-支持-nodejs-require-机制" tabindex="-1"><a class="header-anchor" href="#modules-指定模块寻找-支持-nodejs-require-机制"><span>modules 指定模块寻找，支持 nodejs require 机制</span></a></h2><ul><li>文件夹名称：支持往上寻找</li><li>相对路径</li><li>绝对路径</li></ul><p>文件夹名称、相对路径 问题：<br><strong>一个 chunk 中可能会打包出多个相同模块</strong>。<br> 比如一个js中有2个vue框架。因为其他项目的 vue 引用会捆绑自己的 <code>node_modules</code>，并且独立生成。但如果使用同一个 <code>node_modules</code>(绝对路径) 就不会有此问题</p><p>webpack.config.js</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">modules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 其他不同路径的独立项目打包时会使用它们自己的的 node_modules</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;node_modules&quot;,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 只使用当前项目的 node_modules，其他不同路径的独立项目打包时也会使用此node_modules</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;node_modules&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;E:/Dropbox/github/cqlql.github.io/libr&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;E:/Dropbox/github/cqlql.github.io/js/modules&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;E:/Dropbox/github/cqlql.github.io/css/modules&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> click</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;dom/click&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// E:/Dropbox/github/cqlql.github.io/js/modules/dom/click.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> prism</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;prism/prism&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// E:/Dropbox/github/cqlql.github.io/libr/prism/prism.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,21)]))}const o=s(l,[["render",n],["__file","config 选项.html.vue"]]),d=JSON.parse('{"path":"/old__/%E5%B7%A5%E7%A8%8B-webpack/old/config%20%E9%80%89%E9%A1%B9.html","title":"","lang":"zh-CN","frontmatter":{"description":"output output.publicPath output.publicPath API 参考 输出还是按照 output.path 输出，只是更正全局资源引用路径。否则引用将相对 output.path 部分 loader 有单独的 publicPath，这个只是在全局的基础上追加，比如 file-loader output.filename 除...","head":[["meta",{"property":"og:url","content":"http://docs.cqlql.top/old__/%E5%B7%A5%E7%A8%8B-webpack/old/config%20%E9%80%89%E9%A1%B9.html"}],["meta",{"property":"og:site_name","content":"开发笔记"}],["meta",{"property":"og:description","content":"output output.publicPath output.publicPath API 参考 输出还是按照 output.path 输出，只是更正全局资源引用路径。否则引用将相对 output.path 部分 loader 有单独的 publicPath，这个只是在全局的基础上追加，比如 file-loader output.filename 除..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T02:50:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-28T02:50:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-28T02:50:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"桥黎\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"output","slug":"output","link":"#output","children":[{"level":3,"title":"output.publicPath","slug":"output-publicpath","link":"#output-publicpath","children":[]},{"level":3,"title":"output.filename","slug":"output-filename","link":"#output-filename","children":[]}]},{"level":2,"title":"modules 指定模块寻找，支持 nodejs require 机制","slug":"modules-指定模块寻找-支持-nodejs-require-机制","link":"#modules-指定模块寻找-支持-nodejs-require-机制","children":[]}],"git":{"createdTime":1652927496000,"updatedTime":1730083825000,"contributors":[{"name":"陈桥黎","email":"cql.ql@qq.com","commits":1}]},"readingTime":{"minutes":1.25,"words":375},"filePathRelative":"__old__/工程-webpack/old/config 选项.md","localizedDate":"2022年5月19日","autoDesc":true,"excerpt":"<h2>output</h2>\\n<h3>output.publicPath</h3>\\n<p><a href=\\"https://doc.webpack-china.org/configuration/output#output-publicpath\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">output.publicPath API 参考</a></p>\\n<p>输出还是按照 output.path 输出，只是更正全局资源引用路径。否则引用将相对 output.path</p>\\n<p>部分 loader 有单独的 publicPath，这个只是在全局的基础上追加，比如 file-loader</p>"}');export{o as comp,d as data};
