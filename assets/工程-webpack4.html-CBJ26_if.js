import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{a as e,e as a,o as n}from"./app-C4Nz-QBA.js";const l={};function t(h,i){return n(),e("div",null,i[0]||(i[0]=[a(`<h2 id="代码拆分" tabindex="-1"><a class="header-anchor" href="#代码拆分"><span>代码拆分</span></a></h2><p>Since version 4 the <code>CommonsChunkPlugin</code> was removed in favor of <code>optimization.splitChunks</code> and <code>optimization.runtimeChunk</code> options. Here is how the new flow works.</p><p><a href="https://webpack.js.org/plugins/split-chunks-plugin" target="_blank" rel="noopener noreferrer">https://webpack.js.org/plugins/split-chunks-plugin</a></p><h2 id="css-分离-使用-mini-css-extract-plugin" tabindex="-1"><a class="header-anchor" href="#css-分离-使用-mini-css-extract-plugin"><span>css 分离 使用 mini-css-extract-plugin</span></a></h2><p><a href="https://webpack.js.org/plugins/mini-css-extract-plugin" target="_blank" rel="noopener noreferrer">mini-css-extract-plugin 文档</a></p><h2 id="entry-也能指定文件夹" tabindex="-1"><a class="header-anchor" href="#entry-也能指定文件夹"><span>entry 也能指定文件夹</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">entry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 将为 index.js 新建v3文件夹，</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &#39;v3/index&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;./src/v3/index.pcss&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./src/v3/index.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但自动生成的引用路径可能会多一层，所以直接使用output指定会更好</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">output</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dist/v3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// string</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  filename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[name].js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="build-代码不压缩" tabindex="-1"><a class="header-anchor" href="#build-代码不压缩"><span>build 代码不压缩</span></a></h2><p>方便检查编译代码</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> webpackConfig</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  mode</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;none&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 不压缩代码</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  output</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    pathinfo</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 模块标注路径信息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exclude-include-同时用-exclude优先级更高" tabindex="-1"><a class="header-anchor" href="#exclude-include-同时用-exclude优先级更高"><span>exclude include 同时用,exclude优先级更高</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">js</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  include</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;E:/_work/template-vue/src&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  exclude</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;E:/_work/src/libs/iview-pro&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ],       </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  use</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [ { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">loader</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;babel-loader&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">options</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] } ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="webpack-babel-polyfill-开启按需兼容后-promise-依然报错问题" tabindex="-1"><a class="header-anchor" href="#webpack-babel-polyfill-开启按需兼容后-promise-依然报错问题"><span>webpack babel polyfill 开启按需兼容后 promise 依然报错问题</span></a></h2><p>虽然已经按需 polyfill，但如果 src 中没使用 promise，但 node_modules 中有使用, 不支持 promise 的浏览器还是会报错，<br> 比如动态 import() 就有对 promise 的使用，所以这里手动引入<br> 当然，正式项目肯定会用 promise，所以这种情况可以忽略</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 手动导入</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;core-js/modules/es6.promise.js&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,17)]))}const r=s(l,[["render",t],["__file","工程-webpack4.html.vue"]]),d=JSON.parse('{"path":"/old__/%E5%B7%A5%E7%A8%8B-webpack4.html","title":"","lang":"zh-CN","frontmatter":{"description":"代码拆分 Since version 4 the CommonsChunkPlugin was removed in favor of optimization.splitChunks and optimization.runtimeChunk options. Here is how the new flow works. https://webpa...","head":[["meta",{"property":"og:url","content":"http://docs.cqlql.top/old__/%E5%B7%A5%E7%A8%8B-webpack4.html"}],["meta",{"property":"og:site_name","content":"开发笔记"}],["meta",{"property":"og:description","content":"代码拆分 Since version 4 the CommonsChunkPlugin was removed in favor of optimization.splitChunks and optimization.runtimeChunk options. Here is how the new flow works. https://webpa..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T02:50:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-28T02:50:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-28T02:50:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Joly\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"代码拆分","slug":"代码拆分","link":"#代码拆分","children":[]},{"level":2,"title":"css 分离 使用 mini-css-extract-plugin","slug":"css-分离-使用-mini-css-extract-plugin","link":"#css-分离-使用-mini-css-extract-plugin","children":[]},{"level":2,"title":"entry 也能指定文件夹","slug":"entry-也能指定文件夹","link":"#entry-也能指定文件夹","children":[]},{"level":2,"title":"build 代码不压缩","slug":"build-代码不压缩","link":"#build-代码不压缩","children":[]},{"level":2,"title":"exclude include 同时用,exclude优先级更高","slug":"exclude-include-同时用-exclude优先级更高","link":"#exclude-include-同时用-exclude优先级更高","children":[]},{"level":2,"title":"webpack babel polyfill 开启按需兼容后 promise 依然报错问题","slug":"webpack-babel-polyfill-开启按需兼容后-promise-依然报错问题","link":"#webpack-babel-polyfill-开启按需兼容后-promise-依然报错问题","children":[]}],"git":{"createdTime":1652927496000,"updatedTime":1730083825000,"contributors":[{"name":"陈桥黎","email":"cql.ql@qq.com","commits":1}]},"readingTime":{"minutes":0.93,"words":280},"filePathRelative":"__old__/工程-webpack4.md","localizedDate":"2022年5月19日","autoDesc":true,"excerpt":"<h2>代码拆分</h2>\\n<p>Since version 4 the <code>CommonsChunkPlugin</code> was removed in favor of <code>optimization.splitChunks</code> and <code>optimization.runtimeChunk</code> options. Here is how the new flow works.</p>\\n<p><a href=\\"https://webpack.js.org/plugins/split-chunks-plugin\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://webpack.js.org/plugins/split-chunks-plugin</a></p>"}');export{r as comp,d as data};
