import{_ as s,Z as n,$ as a,a2 as e}from"./framework-d33190a3.js";const t={},c=e(`<h2 id="理解" tabindex="-1"><a class="header-anchor" href="#理解" aria-hidden="true">#</a> 理解</h2><p>装箱：隐式的将值类型转为引用类型</p><p>拆箱：将引用类型转换为值类型</p><p>注意，使用ref 不是装箱，因为不需要类型转换</p><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 装箱</span>
<span class="token class-name">System<span class="token punctuation">.</span>Object</span> obj<span class="token operator">=</span>i<span class="token punctuation">;</span>
<span class="token comment">// 拆箱</span>
<span class="token class-name"><span class="token keyword">int</span></span> j<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),p=[c];function o(i,l){return n(),a("div",null,p)}const d=s(t,[["render",o],["__file","装箱和拆箱.html.vue"]]);export{d as default};
