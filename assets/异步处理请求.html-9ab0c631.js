import{_ as e,Z as p,$ as c,a0 as n,a1 as a,Y as t,a2 as o,E as l}from"./framework-d33190a3.js";const i={},u=o(`<h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h2><p>asp.net 处理请求，会通过线程池线程处理，所以本身就是异步的。</p><p>但依然支持 async 控制器写法:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IHttpActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>Thing<span class="token punctuation">&gt;</span></span> things <span class="token operator">=</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">DoLongDbCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>things<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求进来，抓取线程池线程处理请求，再抓取一个线程池线程开始处理工作任务，释放处理请求的线程，工作完成了再抓取线程来完成请求。</p><p>这里处理请求用了两个线程，等于任务给了另一个线程池线程来完成，多了个转换开销，所以不推荐使用 Task.Run 代码强制进行额外的线程转换。</p><p>除非是异步调用其他资源，比如异步 BD 调用：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IHttpActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>Thing<span class="token punctuation">&gt;</span></span> things <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">DoLongDbCallAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>things<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求进来，抓取线程池线程处理请求，启动异步BD操作，并将线程池线程返回给线程池。当BD调用完后，aps.net 会抓取要给线程池线程完全请求。</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>`,10),r={href:"https://www.coder.work/article/2959487",target:"_blank",rel:"noopener noreferrer"},k={href:"https://stackoverflow.com/questions/30864247/async-calls-in-web-api",target:"_blank",rel:"noopener noreferrer"};function d(h,v){const s=l("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[n("a",r,[a("c# - Web Api 中的异步调用 - IT工具网 (coder.work)"),t(s)])]),n("p",null,[n("a",k,[a("c# - Async calls in Web Api - Stack Overflow"),t(s)])])])}const _=e(i,[["render",d],["__file","异步处理请求.html.vue"]]);export{_ as default};
