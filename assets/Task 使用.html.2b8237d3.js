import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,a as c,b as n,e as s,c as t,f as p,r as i}from"./app.3470b3c0.js";const l={},u=p(`<h2 id="task-\u8BF4\u660E" tabindex="-1"><a class="header-anchor" href="#task-\u8BF4\u660E" aria-hidden="true">#</a> Task \u8BF4\u660E</h2><p>\u4ECE\u7EBF\u7A0B\u6C60\u4E2D\u4F7F\u7528\u4E00\u4E2A\u7EBF\u7A0B</p><h2 id="task-\u57FA\u7840\u4F7F\u7528" tabindex="-1"><a class="header-anchor" href="#task-\u57FA\u7840\u4F7F\u7528" aria-hidden="true">#</a> Task \u57FA\u7840\u4F7F\u7528</h2><p>\u7B49\u5F85\u65B9\u6CD5</p><table><thead><tr><th>\u65B9\u6CD5</th><th>\u8BF4\u660E</th></tr></thead><tbody><tr><td>t.Wait()</td><td>\u7B49\u5F85\u540D\u4E3A t \u7684 Task \u5B9E\u4F8B\u6267\u884C\u5B8C\u6210</td></tr><tr><td>Task.WaitAny(Task[])</td><td>\u6570\u7EC4\u4E2D\u7684\u4EFB\u52A1\u5E76\u884C\u6267\u884C\uFF0C\u53EA\u7B49\u5F85\u6700\u5148\u5B8C\u6210\u7684\u4EFB\u52A1</td></tr><tr><td>Task.WaitAll(Task[])</td><td>\u6570\u7EC4\u4E2D\u7684\u4EFB\u52A1\u5E76\u884C\u6267\u884C\uFF0C\u7B49\u5F85\u6240\u6709\u4EFB\u52A1\u6267\u884C\u5B8C\u6210</td></tr></tbody></table><p>\u521B\u5EFA\u4EFB\u52A1\u793A\u4F8B</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">static</span> <span class="token class-name">System<span class="token punctuation">.</span>Console</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> timer <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* \u521B\u5EFA\u4EFB\u52A1\u7684 3 \u79CD\u65B9\u5F0F */</span>
<span class="token comment">// \u65B9\u5F0F1</span>
<span class="token class-name">Task</span> taskA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span>MethodA<span class="token punctuation">)</span><span class="token punctuation">;</span>
taskA<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5355\u72EC\u8C03\u7528 Start \u5F00\u59CB\u3002\u66F4\u7075\u6D3B</span>
<span class="token comment">// \u65B9\u5F0F2 \u76F4\u63A5\u5F00\u59CB\u4EFB\u52A1</span>
<span class="token class-name">Task</span> taskB <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span>MethodB<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u65B9\u5F0F3 \u76F4\u63A5\u5F00\u59CB\u4EFB\u52A1</span>
<span class="token class-name">Task</span> taskC <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action</span><span class="token punctuation">(</span>MethodC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \u7B49\u5F85\u6240\u6709\u4EFB\u52A1\u8FD0\u884C\u3002\u5426\u5219\u5C06\u7ACB\u5373\u5F80\u4E0B\u6267\u884C</span>
<span class="token class-name">Task<span class="token punctuation">[</span><span class="token punctuation">]</span></span> tasks <span class="token operator">=</span> <span class="token punctuation">{</span> taskA<span class="token punctuation">,</span> taskB<span class="token punctuation">,</span> taskC <span class="token punctuation">}</span><span class="token punctuation">;</span>
Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">timer<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string">ms&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Starting Method A...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Finished Method A...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Starting Method B...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Finished Method B...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Starting Method C...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Finished Method C.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4F7F\u7528-task-factory-startnew-\u4F9D\u6B21\u6267\u884C\u4EFB\u52A1" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528-task-factory-startnew-\u4F9D\u6B21\u6267\u884C\u4EFB\u52A1" aria-hidden="true">#</a> \u4F7F\u7528 <code>Task.Factory.StartNew</code> \u4F9D\u6B21\u6267\u884C\u4EFB\u52A1</h2><p>\u7B49\u5F85\u4E0A\u4E00\u4E2A\u4EFB\u52A1\u5B8C\u6210\u540E\u518D\u6267\u884C\u4E0B\u4E00\u4E2A\u4EFB\u52A1\uFF0C\u5E76\u4E14\u5C06\u4E0A\u4E00\u4E2A\u4EFB\u52A1\u7684\u8FD4\u56DE\u503C\u4F20\u9012\u7ED9\u4E0B\u4E00\u4E2A\u4EFB\u52A1\uFF0C\u4F8B\u5B50\u5982\u4E0B</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> <span class="token function">CallWebService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Starting call to web service...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Finished call to web service.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">89.99M</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">CallStoredProcedure</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">decimal</span></span> amount<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Starting call to stored procedure...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Finished call to stored procedure.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$&quot;12 products cost more than </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">amount</span><span class="token format-string"><span class="token punctuation">:</span>C</span><span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> timer <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Passing the result of one task as an input into another.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> taskCallWebServiceAndThenStoredProcedure <span class="token operator">=</span>
  Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span>CallWebService<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>previousTask <span class="token operator">=&gt;</span> <span class="token function">CallStoredProcedure</span><span class="token punctuation">(</span>previousTask<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \u8FD9\u6B65\u5F88\u5173\u952E</span>
<span class="token comment">// \u8C03\u7528 taskCallWebServiceAndThenStoredProcedure.Result \u5C31\u4F1A\u7B49\u5F85\u4EFB\u52A1\u6267\u884C\u5B8C</span>
<span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Result: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">taskCallWebServiceAndThenStoredProcedure<span class="token punctuation">.</span>Result</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">timer<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token format-string"><span class="token punctuation">:</span>#,##0</span><span class="token punctuation">}</span></span><span class="token string">ms elapsed.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5D4C\u5957\u4EFB\u52A1-\u4F7F\u7528-task-factory-startnew-\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u5D4C\u5957\u4EFB\u52A1-\u4F7F\u7528-task-factory-startnew-\u5B9E\u73B0" aria-hidden="true">#</a> \u5D4C\u5957\u4EFB\u52A1 - \u4F7F\u7528 <code>Task.Factory.StartNew</code> \u5B9E\u73B0</h2><p>\u5728\u4EFB\u52A1\u4E2D\u53C8\u521B\u5EFA\u4E00\u4E2A\u4EFB\u52A1\uFF0C\u8FD9\u4E2A\u65B0\u5EFA\u7684\u4EFB\u52A1\u5C31\u662F\u5B50\u4EFB\u52A1\u3002</p><p>\u6CA1\u6709\u7279\u6B8A\u58F0\u660E\u60C5\u51B5\uFF0C\u7236\u4EFB\u52A1\u548C\u5B50\u4EFB\u52A1\u662F\u4E00\u8D77\u8FD0\u884C\u7684\u3002\u5982\u679C\u9700\u8981\u7B49\u5F85\u5B50\u4EFB\u52A1\u5B8C\u6210\u540E\u518D\u5B8C\u6210\u7236\u4EFB\u52A1\uFF0C\u5219\u9700\u8981\u518D\u521B\u5EFA\u5B50\u4EFB\u52A1\u7684\u65F6\u5019\u589E\u52A0\u53C2\u6570TaskCreationOptions.AttachedToParent\u3002</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">static</span> <span class="token class-name">System<span class="token punctuation">.</span>Console</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">NestedAndChildTasks</span>
<span class="token punctuation">{</span>
  <span class="token keyword">class</span> <span class="token class-name">Program</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OuterMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Outer method starting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// \u5B50\u4EFB\u52A1</span>
      <span class="token comment">// TaskCreationOptions.AttachedToParent \u53C2\u6570\u5B9E\u73B0\u4E32\u8054\u6267\u884C</span>
      <span class="token class-name"><span class="token keyword">var</span></span> inner <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span>InnerMethod<span class="token punctuation">,</span> TaskCreationOptions<span class="token punctuation">.</span>AttachedToParent<span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Outer method finished.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InnerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Inner method starting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Inner method finished.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token class-name"><span class="token keyword">var</span></span> outer <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span>OuterMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
      outer<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Console app is stopping.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),k={href:"https://cloud.tencent.com/developer/article/1432315",target:"_blank",rel:"noopener noreferrer"},r=p(`<h2 id="task-factory-startnew-vs-new-task-start" tabindex="-1"><a class="header-anchor" href="#task-factory-startnew-vs-new-task-start" aria-hidden="true">#</a> \u201CTask.Factory.StartNew\u201D vs \u201Cnew Task(\u2026).Start\u201D</h2><p><code>Task.Factory.StartNew</code> \u80FD\u786E\u4FDD\u53EA\u8C03\u7528\u4E00\u6B21 start\uFF0C \u800C <code>new Task(\u2026).Start</code> \u53EF\u80FD\u5728\u5176\u4ED6\u5730\u65B9\u591A\u6B21\u8C03\u7528 start\uFF0C\u3002 \u4F46\u6709\u4E9B\u5730\u65B9\u8FD8\u662F\u9700\u8981 <code>new Task(\u2026).Start</code>\uFF0C\u89C1\u4E0B\uFF1A</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token comment">// \u9519\u8BEF\u7684\u4F8B\u5B50</span>
 <span class="token class-name">Task</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
t <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// \u2026</span>
      <span class="token comment">// \u8FD9\u91CC t\u4F1A\u88AB\u89C6\u4E3A null</span>
    t<span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span><span class="token comment">/* \u2026 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \u6B63\u786E\u7684\u4F8B\u5B50</span>
<span class="token class-name">Task</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// \u2026</span>
    t<span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span><span class="token comment">/* \u2026 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),d={href:"https://devblogs.microsoft.com/pfxteam/task-factory-startnew-vs-new-task-start/",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("\u53C2\u8003\u6587\u6863\uFF1A"),n("a",k,[s("C#\u5D4C\u5957\u4EFB\u52A1\u548C\u5B50\u4EFB\u52A1"),t(a)])]),r,n("p",null,[s("\u539F\u6587\u94FE\u63A5\uFF1A"),n("a",d,[s('"Task.Factory.StartNew" vs "new Task(...).Start" - .NET Parallel Programming (microsoft.com)'),t(a)])])])}const f=e(l,[["render",v],["__file","Task \u4F7F\u7528.html.vue"]]);export{f as default};
