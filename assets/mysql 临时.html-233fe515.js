import{_ as l,Z as i,$ as n,a0 as e,a1 as a,Y as r,a2 as o,E as s}from"./framework-d33190a3.js";const c={},d=o('<h2 id="理解" tabindex="-1"><a class="header-anchor" href="#理解" aria-hidden="true">#</a> 理解</h2><p>ORM 是 Object Relation Mapping 简称，对象关系映射，将数据库映射为实体类，像对象一样操作数据库</p><p>dataset 会将数据加载到内存</p><p>DataAdapter 操作内存中的数据，需要在内存中缓存数据时使用</p><p>ado.net 更底层，EF core 是 ado.net 高级封装， 像对象一样操作数据库，而无需自己编写 sql 语句</p><h2 id="sql语句要简单" tabindex="-1"><a class="header-anchor" href="#sql语句要简单" aria-hidden="true">#</a> sql语句要简单</h2><p>不要包含业务逻辑</p><ul><li>便迁移</li><li>便修改</li><li>便理解</li><li>宁多查次库，也最好不做关联查。</li></ul><h2 id="事务的四个特性-acid-【面试常考项】" tabindex="-1"><a class="header-anchor" href="#事务的四个特性-acid-【面试常考项】" aria-hidden="true">#</a> 事务的四个特性(ACID)【面试常考项】</h2><ol><li>原子性（Atomicity）：指事务是一个不可分割的最小工作单位，事务中的操作只有都发生和都不发生两种情况</li><li>一致性（Consistency）：事务必须使数据库从一个一致状态变换到另外一个一致状态，举一个栗子，李二给王五转账50元，其事务就是让李二账户上减去50元，王五账户上加上50元；一致性是指其他事务看到的情况是要么李二还没有给王五转账的状态，要么王五已经成功接收到李二的50元转账。而对于李二少了50元，王五还没加上50元这个中间状态是不可见的。也就是说，其他事务看到的数据关系是正确的，不存在矛盾。</li><li>隔离性（Isolation）：一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。最保险的方式就是串行执行，但会阻塞其他事务执行，效率低，所以sql标准做出了妥协，提出了4个隔离级别，只有最高级别才是串行执行。</li><li>持久性（Durability）：一个事务一旦提交成功，它对数据库中数据的改变将是永久性的，接下来的其他操作或故障不应对其有任何影响。也就是说，事务的结束必须保证数据已经保存到数据库中。</li></ol>',10),h={href:"https://blog.csdn.net/qq_56880706/article/details/122653735",target:"_blank",rel:"noopener noreferrer"};function _(p,f){const t=s("ExternalLinkIcon");return i(),n("div",null,[d,e("p",null,[a("参考文档 "),e("a",h,[a("MySQL事务(transaction)"),r(t)])])])}const m=l(c,[["render",_],["__file","mysql 临时.html.vue"]]);export{m as default};
