import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,a as o,e as s,f as n,c,b as a,r as i}from"./app.63a6993e.js";const l={},u=a(`<h2 id="\u5F3A\u5236\u5783\u573E\u56DE\u6536" tabindex="-1"><a class="header-anchor" href="#\u5F3A\u5236\u5783\u573E\u56DE\u6536" aria-hidden="true">#</a> \u5F3A\u5236\u5783\u573E\u56DE\u6536</h2><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token comment">// force two garbage collections to release memory that is no</span>
<span class="token comment">// longer referenced but has not been released yet</span>
GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
GC<span class="token punctuation">.</span><span class="token function">WaitForPendingFinalizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6A21\u62DF\u5185\u5B58\u5360\u7528" tabindex="-1"><a class="header-anchor" href="#\u6A21\u62DF\u5185\u5B58\u5360\u7528" aria-hidden="true">#</a> \u6A21\u62DF\u5185\u5B58\u5360\u7528</h2><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token comment">// \u5927\u6982\u5360\u7528 30m \u5DE6\u53F3\u5185\u5B58</span>
<span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> largeArrayOfInts <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000_000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6A21\u62DF-cpu-\u5360\u7528-\u5904\u7406\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u6A21\u62DF-cpu-\u5360\u7528-\u5904\u7406\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u6A21\u62DF cpu \u5360\u7528 - \u5904\u7406\u5B57\u7B26\u4E32</h2><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50_000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Recorder<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Using string with +&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  s <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Recorder<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Recorder<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Using StringBuilder&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Recorder<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u8BA1\u7B97\u5185\u5B58\u5360\u7528\u4EE5\u53CA\u8FD0\u884C\u8017\u65F6" tabindex="-1"><a class="header-anchor" href="#\u8BA1\u7B97\u5185\u5B58\u5360\u7528\u4EE5\u53CA\u8FD0\u884C\u8017\u65F6" aria-hidden="true">#</a> \u8BA1\u7B97\u5185\u5B58\u5360\u7528\u4EE5\u53CA\u8FD0\u884C\u8017\u65F6</h2>`,7),r={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.diagnostics.stopwatch?view=net-7.0",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">static</span> <span class="token class-name">System<span class="token punctuation">.</span>Console</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">static</span> <span class="token class-name">System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>Process</span><span class="token punctuation">;</span>


<span class="token keyword">namespace</span> <span class="token namespace">JoDotNet<span class="token punctuation">.</span>SDK<span class="token punctuation">.</span>Shared</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Recorder</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">Stopwatch</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">long</span></span> bytesPhysicalBefore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">long</span></span> bytesVirtualBefore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// force two garbage collections to release memory that is no</span>
      <span class="token comment">// longer referenced but has not been released yet</span>
      GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      GC<span class="token punctuation">.</span><span class="token function">WaitForPendingFinalizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// store the current physical and virtual memory use</span>
      bytesPhysicalBefore <span class="token operator">=</span> <span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>WorkingSet64<span class="token punctuation">;</span>
      bytesVirtualBefore <span class="token operator">=</span> <span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>VirtualMemorySize64<span class="token punctuation">;</span>
      timer<span class="token punctuation">.</span><span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name"><span class="token keyword">long</span></span> bytesPhysicalAfter <span class="token operator">=</span> <span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>WorkingSet64<span class="token punctuation">;</span>
      <span class="token class-name"><span class="token keyword">long</span></span> bytesVirtualAfter <span class="token operator">=</span> <span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>VirtualMemorySize64<span class="token punctuation">;</span>

      <span class="token class-name"><span class="token keyword">long</span></span> bytesPhysical <span class="token operator">=</span> bytesPhysicalAfter <span class="token operator">-</span> bytesPhysicalBefore<span class="token punctuation">;</span>
      <span class="token class-name"><span class="token keyword">long</span></span> bytesVirtual <span class="token operator">=</span> bytesVirtualAfter <span class="token operator">-</span> bytesVirtualBefore<span class="token punctuation">;</span>



      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0:N0} physical bytes used.&quot;</span><span class="token punctuation">,</span>bytesPhysical<span class="token punctuation">)</span><span class="token punctuation">;</span>
      SharpPad<span class="token punctuation">.</span>Output<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">bytesPhysical</span><span class="token format-string"><span class="token punctuation">:</span>N0</span><span class="token punctuation">}</span></span><span class="token string"> physical bytes used.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0:N0} virtual bytes used.&quot;</span><span class="token punctuation">,</span> bytesVirtual<span class="token punctuation">)</span><span class="token punctuation">;</span>
      SharpPad<span class="token punctuation">.</span>Output<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">bytesVirtual</span><span class="token format-string"><span class="token punctuation">:</span>N0</span><span class="token punctuation">}</span></span><span class="token string"> virtual bytes used.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0} time span elapsed.&quot;</span><span class="token punctuation">,</span> timer<span class="token punctuation">.</span>Elapsed<span class="token punctuation">)</span><span class="token punctuation">;</span>
      SharpPad<span class="token punctuation">.</span>Output<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">timer<span class="token punctuation">.</span>Elapsed</span><span class="token punctuation">}</span></span><span class="token string"> time span elapsed.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0:N0} total milliseconds elapsed.&quot;</span><span class="token punctuation">,</span> timer<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
      SharpPad<span class="token punctuation">.</span>Output<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">timer<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token format-string"><span class="token punctuation">:</span>N0</span><span class="token punctuation">}</span></span><span class="token string"> total milliseconds elapsed.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function d(m,v){const t=i("ExternalLinkIcon");return e(),o("div",null,[u,s("p",null,[n("\u6D89\u53CA "),s("a",r,[n("Stopwatch"),c(t)]),n(" \u3001 GetCurrentProcess \u3001 GC \u7684\u4F7F\u7528")]),k])}const g=p(l,[["render",d],["__file","\u6027\u80FD\u76D1\u63A7.html.vue"]]);export{g as default};
