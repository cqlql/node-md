import{_ as s,Z as a,$ as n,a2 as e}from"./framework-d33190a3.js";const t={},p=e(`<h2 id="可以直接使用实例的类型" tabindex="-1"><a class="header-anchor" href="#可以直接使用实例的类型" aria-hidden="true">#</a> 可以直接使用实例的类型</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> createI18n <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> createI18n<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="还可以创建类型函数" tabindex="-1"><a class="header-anchor" href="#还可以创建类型函数" aria-hidden="true">#</a> 还可以创建类型函数？</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * Obtain the return type of a function type
 */</span>
<span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型的所有-key-作为类型" tabindex="-1"><a class="header-anchor" href="#类型的所有-key-作为类型" aria-hidden="true">#</a> 类型的所有 key 作为类型</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Writable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="心得" tabindex="-1"><a class="header-anchor" href="#心得" aria-hidden="true">#</a> 心得</h2><p>先写类型约束，再用？</p>`,8),o=[p];function c(r,l){return a(),n("div",null,o)}const d=s(t,[["render",c],["__file","待整理学习.html.vue"]]);export{d as default};
