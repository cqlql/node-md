import{_ as p,Z as e,$ as o,a0 as s,a1 as n,Y as c,a2 as a,E as i}from"./framework-d33190a3.js";const l={},u=a(`<h2 id="强制垃圾回收" tabindex="-1"><a class="header-anchor" href="#强制垃圾回收" aria-hidden="true">#</a> 强制垃圾回收</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// force two garbage collections to release memory that is no</span>
<span class="token comment">// longer referenced but has not been released yet</span>
GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
GC<span class="token punctuation">.</span><span class="token function">WaitForPendingFinalizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模拟内存占用" tabindex="-1"><a class="header-anchor" href="#模拟内存占用" aria-hidden="true">#</a> 模拟内存占用</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 大概占用 30m 左右内存</span>
<span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> largeArrayOfInts <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000_000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模拟-cpu-占用-处理字符串" tabindex="-1"><a class="header-anchor" href="#模拟-cpu-占用-处理字符串" aria-hidden="true">#</a> 模拟 cpu 占用 - 处理字符串</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50_000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Recorder<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Using string with +&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  s <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Recorder<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Recorder<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Using StringBuilder&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> builder<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Recorder<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计算内存占用以及运行耗时" tabindex="-1"><a class="header-anchor" href="#计算内存占用以及运行耗时" aria-hidden="true">#</a> 计算内存占用以及运行耗时</h2>`,7),r={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.diagnostics.stopwatch?view=net-7.0",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">static</span> <span class="token class-name">System<span class="token punctuation">.</span>Console</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">static</span> <span class="token class-name">System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>Process</span><span class="token punctuation">;</span>


<span class="token keyword">namespace</span> <span class="token namespace">JoDotNet<span class="token punctuation">.</span>SDK<span class="token punctuation">.</span>Shared</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Recorder</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">Stopwatch</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">long</span></span> bytesPhysicalBefore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">long</span></span> bytesVirtualBefore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// force two garbage collections to release memory that is no</span>
      <span class="token comment">// longer referenced but has not been released yet</span>
      GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      GC<span class="token punctuation">.</span><span class="token function">WaitForPendingFinalizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// store the current physical and virtual memory use</span>
      bytesPhysicalBefore <span class="token operator">=</span> <span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>WorkingSet64<span class="token punctuation">;</span>
      bytesVirtualBefore <span class="token operator">=</span> <span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>VirtualMemorySize64<span class="token punctuation">;</span>
      timer<span class="token punctuation">.</span><span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name"><span class="token keyword">long</span></span> bytesPhysicalAfter <span class="token operator">=</span> <span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>WorkingSet64<span class="token punctuation">;</span>
      <span class="token class-name"><span class="token keyword">long</span></span> bytesVirtualAfter <span class="token operator">=</span> <span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>VirtualMemorySize64<span class="token punctuation">;</span>

      <span class="token class-name"><span class="token keyword">long</span></span> bytesPhysical <span class="token operator">=</span> bytesPhysicalAfter <span class="token operator">-</span> bytesPhysicalBefore<span class="token punctuation">;</span>
      <span class="token class-name"><span class="token keyword">long</span></span> bytesVirtual <span class="token operator">=</span> bytesVirtualAfter <span class="token operator">-</span> bytesVirtualBefore<span class="token punctuation">;</span>



      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0:N0} physical bytes used.&quot;</span><span class="token punctuation">,</span>bytesPhysical<span class="token punctuation">)</span><span class="token punctuation">;</span>
      SharpPad<span class="token punctuation">.</span>Output<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">bytesPhysical</span><span class="token format-string"><span class="token punctuation">:</span>N0</span><span class="token punctuation">}</span></span><span class="token string"> physical bytes used.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0:N0} virtual bytes used.&quot;</span><span class="token punctuation">,</span> bytesVirtual<span class="token punctuation">)</span><span class="token punctuation">;</span>
      SharpPad<span class="token punctuation">.</span>Output<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">bytesVirtual</span><span class="token format-string"><span class="token punctuation">:</span>N0</span><span class="token punctuation">}</span></span><span class="token string"> virtual bytes used.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0} time span elapsed.&quot;</span><span class="token punctuation">,</span> timer<span class="token punctuation">.</span>Elapsed<span class="token punctuation">)</span><span class="token punctuation">;</span>
      SharpPad<span class="token punctuation">.</span>Output<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">timer<span class="token punctuation">.</span>Elapsed</span><span class="token punctuation">}</span></span><span class="token string"> time span elapsed.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0:N0} total milliseconds elapsed.&quot;</span><span class="token punctuation">,</span> timer<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
      SharpPad<span class="token punctuation">.</span>Output<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">timer<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token format-string"><span class="token punctuation">:</span>N0</span><span class="token punctuation">}</span></span><span class="token string"> total milliseconds elapsed.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function d(v,m){const t=i("ExternalLinkIcon");return e(),o("div",null,[u,s("p",null,[n("涉及 "),s("a",r,[n("Stopwatch"),c(t)]),n(" 、 GetCurrentProcess 、 GC 的使用")]),k])}const y=p(l,[["render",d],["__file","性能监控.html.vue"]]);export{y as default};
